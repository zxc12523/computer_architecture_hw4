
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 UNKNOWN, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Executing script file `cpu.ys' --

1. Executing Verilog-2005 frontend: ./codes/alu.v
Parsing Verilog input from `./codes/alu.v' to AST representation.
Generating RTLIL representation for module `\ALU'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: ./codes/branch_unit.v
Parsing Verilog input from `./codes/branch_unit.v' to AST representation.
Generating RTLIL representation for module `\BranchUnit'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: ./codes/control.v
Parsing Verilog input from `./codes/control.v' to AST representation.
Generating RTLIL representation for module `\Control'.
Note: Assuming pure combinatorial block at ./codes/control.v:27 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: ./codes/cpu.v
Parsing Verilog input from `./codes/cpu.v' to AST representation.
Generating RTLIL representation for module `\cpu'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: ./codes/EXE_buffer.v
Parsing Verilog input from `./codes/EXE_buffer.v' to AST representation.
Generating RTLIL representation for module `\EXE_buffer'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: ./codes/forward_unit.v
Parsing Verilog input from `./codes/forward_unit.v' to AST representation.
Generating RTLIL representation for module `\Forward_Unit'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: ./codes/hazard_unit.v
Parsing Verilog input from `./codes/hazard_unit.v' to AST representation.
Generating RTLIL representation for module `\Hazard_Unit'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: ./codes/ID_buffer.v
Parsing Verilog input from `./codes/ID_buffer.v' to AST representation.
Generating RTLIL representation for module `\ID_buffer'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: ./codes/IF_buffer.v
Parsing Verilog input from `./codes/IF_buffer.v' to AST representation.
Generating RTLIL representation for module `\IF_buffer'.
Note: Assuming pure combinatorial block at ./codes/IF_buffer.v:25 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: ./codes/imm_generator.v
Parsing Verilog input from `./codes/imm_generator.v' to AST representation.
Generating RTLIL representation for module `\Imm_Gen'.
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: ./codes/Mem_address.v
Parsing Verilog input from `./codes/Mem_address.v' to AST representation.
Generating RTLIL representation for module `\Mem_adder'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: ./codes/MEM1_buffer.v
Parsing Verilog input from `./codes/MEM1_buffer.v' to AST representation.
Generating RTLIL representation for module `\MEM1_buffer'.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend: ./codes/MEM2_buffer.v
Parsing Verilog input from `./codes/MEM2_buffer.v' to AST representation.
Generating RTLIL representation for module `\MEM2_buffer'.
Successfully finished Verilog frontend.

14. Executing Verilog-2005 frontend: ./codes/multiplexer2.v
Parsing Verilog input from `./codes/multiplexer2.v' to AST representation.
Generating RTLIL representation for module `\multiplexer2'.
Successfully finished Verilog frontend.

15. Executing Verilog-2005 frontend: ./codes/multiplexer4.v
Parsing Verilog input from `./codes/multiplexer4.v' to AST representation.
Generating RTLIL representation for module `\Multiplexer4'.
Successfully finished Verilog frontend.

16. Executing Verilog-2005 frontend: ./codes/multiplexer8.v
Parsing Verilog input from `./codes/multiplexer8.v' to AST representation.
Generating RTLIL representation for module `\Multiplexer8'.
Successfully finished Verilog frontend.

17. Executing Verilog-2005 frontend: ./codes/multiplexer32.v
Parsing Verilog input from `./codes/multiplexer32.v' to AST representation.
Generating RTLIL representation for module `\Multiplexer32'.
Successfully finished Verilog frontend.

18. Executing Verilog-2005 frontend: ./codes/pc.v
Parsing Verilog input from `./codes/pc.v' to AST representation.
Generating RTLIL representation for module `\PC'.
Successfully finished Verilog frontend.

19. Executing Verilog-2005 frontend: ./codes/register.v
Parsing Verilog input from `./codes/register.v' to AST representation.
Generating RTLIL representation for module `\Register'.
Successfully finished Verilog frontend.

20. Executing SYNTH pass.

20.1. Executing HIERARCHY pass (managing design hierarchy).

20.1.1. Analyzing design hierarchy..
Top module:  \cpu
Used module:     \Forward_Unit
Used module:     \EXE_buffer
Used module:     \ALU
Used module:     \Multiplexer4
Used module:     \Mem_adder
Used module:     \MEM2_buffer
Used module:     \MEM1_buffer
Used module:     \ID_buffer
Used module:     \BranchUnit
Used module:     \Control
Used module:     \Hazard_Unit
Used module:     \Imm_Gen
Used module:     \Register
Used module:         \Multiplexer32
Used module:             \Multiplexer8
Used module:     \IF_buffer
Used module:     \PC

20.1.2. Analyzing design hierarchy..
Top module:  \cpu
Used module:     \Forward_Unit
Used module:     \EXE_buffer
Used module:     \ALU
Used module:     \Multiplexer4
Used module:     \Mem_adder
Used module:     \MEM2_buffer
Used module:     \MEM1_buffer
Used module:     \ID_buffer
Used module:     \BranchUnit
Used module:     \Control
Used module:     \Hazard_Unit
Used module:     \Imm_Gen
Used module:     \Register
Used module:         \Multiplexer32
Used module:             \Multiplexer8
Used module:     \IF_buffer
Used module:     \PC
Removing unused module `\multiplexer2'.
Removed 1 unused modules.
Mapping positional arguments of cell Multiplexer32.M4 (Multiplexer4).
Mapping positional arguments of cell Multiplexer32.M83 (Multiplexer8).
Mapping positional arguments of cell Multiplexer32.M82 (Multiplexer8).
Mapping positional arguments of cell Multiplexer32.M81 (Multiplexer8).
Mapping positional arguments of cell Multiplexer32.M80 (Multiplexer8).
Mapping positional arguments of cell Multiplexer8.M42 (Multiplexer4).
Mapping positional arguments of cell Multiplexer8.M41 (Multiplexer4).
Mapping positional arguments of cell Register.M2 (Multiplexer32).
Mapping positional arguments of cell Register.M1 (Multiplexer32).
Mapping positional arguments of cell cpu.FU (Forward_Unit).
Mapping positional arguments of cell cpu.EXE (EXE_buffer).
Mapping positional arguments of cell cpu.ALU1 (ALU).
Mapping positional arguments of cell cpu.ALU_B (Multiplexer4).
Mapping positional arguments of cell cpu.ALU_A (Multiplexer4).
Mapping positional arguments of cell cpu.DMC (Mem_adder).
Mapping positional arguments of cell cpu.DMC_Data (Multiplexer4).
Mapping positional arguments of cell cpu.DMC_Addr (Multiplexer4).
Mapping positional arguments of cell cpu.MEM2 (MEM2_buffer).
Mapping positional arguments of cell cpu.MEM1 (MEM1_buffer).
Mapping positional arguments of cell cpu.ID (ID_buffer).
Mapping positional arguments of cell cpu.BU (BranchUnit).
Mapping positional arguments of cell cpu.CON (Control).
Mapping positional arguments of cell cpu.HU (Hazard_Unit).
Mapping positional arguments of cell cpu.IMM (Imm_Gen).
Mapping positional arguments of cell cpu.REG (Register).
Mapping positional arguments of cell cpu.IF (IF_buffer).
Mapping positional arguments of cell cpu.PC (PC).

20.2. Executing PROC pass (convert processes to netlists).

20.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

20.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$./codes/pc.v:31$142 in module PC.
Marked 2 switch rules as full_case in process $proc$./codes/pc.v:19$138 in module PC.
Marked 3 switch rules as full_case in process $proc$./codes/register.v:37$279 in module Register.
Marked 1 switch rules as full_case in process $proc$./codes/imm_generator.v:12$121 in module Imm_Gen.
Marked 4 switch rules as full_case in process $proc$./codes/IF_buffer.v:29$115 in module IF_buffer.
Marked 1 switch rules as full_case in process $proc$./codes/hazard_unit.v:83$85 in module Hazard_Unit.
Marked 2 switch rules as full_case in process $proc$./codes/hazard_unit.v:70$82 in module Hazard_Unit.
Marked 3 switch rules as full_case in process $proc$./codes/hazard_unit.v:54$73 in module Hazard_Unit.
Marked 3 switch rules as full_case in process $proc$./codes/hazard_unit.v:40$66 in module Hazard_Unit.
Marked 1 switch rules as full_case in process $proc$./codes/control.v:27$31 in module Control.
Marked 1 switch rules as full_case in process $proc$./codes/alu.v:14$1 in module ALU.
Removed a total of 0 dead cases.

20.2.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\PC.$proc$./codes/pc.v:14$145'.
  Set init value: \o_i_addr_r = 64'0000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\PC.$proc$./codes/pc.v:13$144'.
  Set init value: \o_i_addr_w = 64'0000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\IF_buffer.$proc$./codes/IF_buffer.v:17$120'.
  Set init value: \IF1 = 0
  Set init value: \IF0 = 0
  Set init value: \IF2 = 0
  Set init value: \ind_w = 2'00
Found init rule in `\Hazard_Unit.$proc$./codes/hazard_unit.v:38$89'.
  Set init value: \dh_cnt2 = 0
Found init rule in `\Hazard_Unit.$proc$./codes/hazard_unit.v:37$88'.
  Set init value: \dh_cnt1 = 0
Found init rule in `\Hazard_Unit.$proc$./codes/hazard_unit.v:36$87'.
  Set init value: \bh_cnt = 0
Found init rule in `\Hazard_Unit.$proc$./codes/hazard_unit.v:31$86'.
  Set init value: \ind_r = 2'00

20.2.4. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \i_rst_n in `\PC.$proc$./codes/pc.v:31$142'.

20.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\PC.$proc$./codes/pc.v:14$145'.
     1/1: $2\o_i_addr_r[63:0]
Creating decoders for process `\PC.$proc$./codes/pc.v:13$144'.
     1/1: $3\o_i_addr_w[63:0]
Creating decoders for process `\PC.$proc$./codes/pc.v:31$142'.
     1/2: $1\o_i_addr_r[63:0]
     2/2: $0\o_i_addr_r[63:0]
Creating decoders for process `\PC.$proc$./codes/pc.v:19$138'.
     1/3: $2\o_i_addr_w[63:0]
     2/3: $1\o_i_addr_w[63:0]
     3/3: $0\o_i_addr_w[63:0]
Creating decoders for process `\Register.$proc$./codes/register.v:19$335'.
     1/65: $1\i[31:0]
     2/65: $0$memwr$\x$./codes/register.v:21$209_DATA[63:0]$399
     3/65: $0$memwr$\x$./codes/register.v:21$209_ADDR[31:0]$398
     4/65: $0$memwr$\x$./codes/register.v:21$208_DATA[63:0]$397
     5/65: $0$memwr$\x$./codes/register.v:21$208_ADDR[31:0]$396
     6/65: $0$memwr$\x$./codes/register.v:21$207_DATA[63:0]$395
     7/65: $0$memwr$\x$./codes/register.v:21$207_ADDR[31:0]$394
     8/65: $0$memwr$\x$./codes/register.v:21$206_DATA[63:0]$393
     9/65: $0$memwr$\x$./codes/register.v:21$206_ADDR[31:0]$392
    10/65: $0$memwr$\x$./codes/register.v:21$205_DATA[63:0]$391
    11/65: $0$memwr$\x$./codes/register.v:21$205_ADDR[31:0]$390
    12/65: $0$memwr$\x$./codes/register.v:21$204_DATA[63:0]$389
    13/65: $0$memwr$\x$./codes/register.v:21$204_ADDR[31:0]$388
    14/65: $0$memwr$\x$./codes/register.v:21$203_DATA[63:0]$387
    15/65: $0$memwr$\x$./codes/register.v:21$203_ADDR[31:0]$386
    16/65: $0$memwr$\x$./codes/register.v:21$202_DATA[63:0]$385
    17/65: $0$memwr$\x$./codes/register.v:21$202_ADDR[31:0]$384
    18/65: $0$memwr$\x$./codes/register.v:21$201_DATA[63:0]$383
    19/65: $0$memwr$\x$./codes/register.v:21$201_ADDR[31:0]$382
    20/65: $0$memwr$\x$./codes/register.v:21$200_DATA[63:0]$381
    21/65: $0$memwr$\x$./codes/register.v:21$200_ADDR[31:0]$380
    22/65: $0$memwr$\x$./codes/register.v:21$199_DATA[63:0]$379
    23/65: $0$memwr$\x$./codes/register.v:21$199_ADDR[31:0]$378
    24/65: $0$memwr$\x$./codes/register.v:21$198_DATA[63:0]$377
    25/65: $0$memwr$\x$./codes/register.v:21$198_ADDR[31:0]$376
    26/65: $0$memwr$\x$./codes/register.v:21$197_DATA[63:0]$375
    27/65: $0$memwr$\x$./codes/register.v:21$197_ADDR[31:0]$374
    28/65: $0$memwr$\x$./codes/register.v:21$196_DATA[63:0]$373
    29/65: $0$memwr$\x$./codes/register.v:21$196_ADDR[31:0]$372
    30/65: $0$memwr$\x$./codes/register.v:21$195_DATA[63:0]$371
    31/65: $0$memwr$\x$./codes/register.v:21$195_ADDR[31:0]$370
    32/65: $0$memwr$\x$./codes/register.v:21$194_DATA[63:0]$369
    33/65: $0$memwr$\x$./codes/register.v:21$194_ADDR[31:0]$368
    34/65: $0$memwr$\x$./codes/register.v:21$193_DATA[63:0]$367
    35/65: $0$memwr$\x$./codes/register.v:21$193_ADDR[31:0]$366
    36/65: $0$memwr$\x$./codes/register.v:21$192_DATA[63:0]$365
    37/65: $0$memwr$\x$./codes/register.v:21$192_ADDR[31:0]$364
    38/65: $0$memwr$\x$./codes/register.v:21$191_DATA[63:0]$363
    39/65: $0$memwr$\x$./codes/register.v:21$191_ADDR[31:0]$362
    40/65: $0$memwr$\x$./codes/register.v:21$190_DATA[63:0]$361
    41/65: $0$memwr$\x$./codes/register.v:21$190_ADDR[31:0]$360
    42/65: $0$memwr$\x$./codes/register.v:21$189_DATA[63:0]$359
    43/65: $0$memwr$\x$./codes/register.v:21$189_ADDR[31:0]$358
    44/65: $0$memwr$\x$./codes/register.v:21$188_DATA[63:0]$357
    45/65: $0$memwr$\x$./codes/register.v:21$188_ADDR[31:0]$356
    46/65: $0$memwr$\x$./codes/register.v:21$187_DATA[63:0]$355
    47/65: $0$memwr$\x$./codes/register.v:21$187_ADDR[31:0]$354
    48/65: $0$memwr$\x$./codes/register.v:21$186_DATA[63:0]$353
    49/65: $0$memwr$\x$./codes/register.v:21$186_ADDR[31:0]$352
    50/65: $0$memwr$\x$./codes/register.v:21$185_DATA[63:0]$351
    51/65: $0$memwr$\x$./codes/register.v:21$185_ADDR[31:0]$350
    52/65: $0$memwr$\x$./codes/register.v:21$184_DATA[63:0]$349
    53/65: $0$memwr$\x$./codes/register.v:21$184_ADDR[31:0]$348
    54/65: $0$memwr$\x$./codes/register.v:21$183_DATA[63:0]$347
    55/65: $0$memwr$\x$./codes/register.v:21$183_ADDR[31:0]$346
    56/65: $0$memwr$\x$./codes/register.v:21$182_DATA[63:0]$345
    57/65: $0$memwr$\x$./codes/register.v:21$182_ADDR[31:0]$344
    58/65: $0$memwr$\x$./codes/register.v:21$181_DATA[63:0]$343
    59/65: $0$memwr$\x$./codes/register.v:21$181_ADDR[31:0]$342
    60/65: $0$memwr$\x$./codes/register.v:21$180_DATA[63:0]$341
    61/65: $0$memwr$\x$./codes/register.v:21$180_ADDR[31:0]$340
    62/65: $0$memwr$\x$./codes/register.v:21$179_DATA[63:0]$339
    63/65: $0$memwr$\x$./codes/register.v:21$179_ADDR[31:0]$338
    64/65: $0$memwr$\x$./codes/register.v:21$178_DATA[63:0]$336
    65/65: $0$memwr$\x$./codes/register.v:21$178_ADDR[31:0]$337
Creating decoders for process `\Register.$proc$./codes/register.v:17$334'.
     1/1: $0\i[31:0]
Creating decoders for process `\Register.$proc$./codes/register.v:37$279'.
     1/15: $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282
     2/15: $0$memwr$\x$./codes/register.v:40$210_DATA[63:0]$281
     3/15: $0$memwr$\x$./codes/register.v:40$210_ADDR[4:0]$280
     4/15: $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285
     5/15: $0$memwr$\x$./codes/register.v:43$211_DATA[63:0]$284
     6/15: $0$memwr$\x$./codes/register.v:43$211_ADDR[4:0]$283
     7/15: $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288
     8/15: $0$memwr$\x$./codes/register.v:44$212_DATA[63:0]$287
     9/15: $0$memwr$\x$./codes/register.v:44$212_ADDR[4:0]$286
    10/15: $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291
    11/15: $0$memwr$\x$./codes/register.v:48$213_DATA[63:0]$290
    12/15: $0$memwr$\x$./codes/register.v:48$213_ADDR[4:0]$289
    13/15: $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294
    14/15: $0$memwr$\x$./codes/register.v:51$214_DATA[63:0]$293
    15/15: $0$memwr$\x$./codes/register.v:51$214_ADDR[4:0]$292
Creating decoders for process `\MEM2_buffer.$proc$./codes/MEM2_buffer.v:22$127'.
     1/2: $0\MEM2_rd_r[4:0]
     2/2: $0\MEM2_Memread_r[0:0]
Creating decoders for process `\MEM2_buffer.$proc$./codes/MEM2_buffer.v:17$126'.
     1/2: $0\MEM2_rd_w[4:0]
     2/2: $0\MEM2_Memread_w[0:0]
Creating decoders for process `\MEM1_buffer.$proc$./codes/MEM1_buffer.v:20$125'.
     1/2: $0\MEM1_rd_r[4:0]
     2/2: $0\MEM1_MemRead_r[0:0]
Creating decoders for process `\MEM1_buffer.$proc$./codes/MEM1_buffer.v:15$124'.
     1/2: $0\MEM1_rd_w[4:0]
     2/2: $0\MEM1_MemRead_w[0:0]
Creating decoders for process `\Imm_Gen.$proc$./codes/imm_generator.v:12$121'.
     1/6: $1\imm[11:0] [11]
     2/6: $1\imm[11:0] [9:5]
     3/6: $1\imm[11:0] [4]
     4/6: $1\imm[11:0] [10]
     5/6: $1\imm[11:0] [3:0]
     6/6: $0\imm[11:0]
Creating decoders for process `\IF_buffer.$proc$./codes/IF_buffer.v:17$120'.
     1/5: $1\ind_w[1:0]
     2/5: $0\ind_r[1:0]
     3/5: $1\IF2[31:0]
     4/5: $1\IF1[31:0]
     5/5: $1\IF0[31:0]
Creating decoders for process `\IF_buffer.$proc$./codes/IF_buffer.v:44$119'.
     1/3: $0\IF0[31:0]
     2/3: $0\IF1[31:0]
     3/3: $0\IF2[31:0]
Creating decoders for process `\IF_buffer.$proc$./codes/IF_buffer.v:29$115'.
     1/5: $4\o_inst_r[31:0]
     2/5: $3\o_inst_r[31:0]
     3/5: $2\o_inst_r[31:0]
     4/5: $1\o_inst_r[31:0]
     5/5: $0\o_inst_r[31:0]
Creating decoders for process `\IF_buffer.$proc$./codes/IF_buffer.v:25$114'.
     1/1: $0\ind_w[1:0]
Creating decoders for process `\ID_buffer.$proc$./codes/ID_buffer.v:65$113'.
     1/11: $0\rd_r[4:0]
     2/11: $0\rs2_r[4:0]
     3/11: $0\rs1_r[4:0]
     4/11: $0\immediate_r[11:0]
     5/11: $0\r2_r[63:0]
     6/11: $0\r1_r[63:0]
     7/11: $0\WriteBack_r[0:0]
     8/11: $0\ExeOpcode_r[9:0]
     9/11: $0\MemWrite_r[0:0]
    10/11: $0\MemRead_r[0:0]
    11/11: $0\Finish_r[0:0]
Creating decoders for process `\ID_buffer.$proc$./codes/ID_buffer.v:51$90'.
     1/11: $0\rd_w[4:0]
     2/11: $0\rs2_w[4:0]
     3/11: $0\rs1_w[4:0]
     4/11: $0\immediate_w[11:0]
     5/11: $0\r2_w[63:0]
     6/11: $0\r1_w[63:0]
     7/11: $0\WriteBack_w[0:0]
     8/11: $0\ExeOpcode_w[9:0]
     9/11: $0\MemWrite_w[0:0]
    10/11: $0\MemRead_w[0:0]
    11/11: $0\Finish_w[0:0]
Creating decoders for process `\Hazard_Unit.$proc$./codes/hazard_unit.v:38$89'.
     1/1: $7\dh_cnt2[31:0]
Creating decoders for process `\Hazard_Unit.$proc$./codes/hazard_unit.v:37$88'.
     1/1: $7\dh_cnt1[31:0]
Creating decoders for process `\Hazard_Unit.$proc$./codes/hazard_unit.v:36$87'.
     1/1: $6\bh_cnt[31:0]
Creating decoders for process `\Hazard_Unit.$proc$./codes/hazard_unit.v:31$86'.
     1/1: $5\ind_r[1:0]
Creating decoders for process `\Hazard_Unit.$proc$./codes/hazard_unit.v:83$85'.
     1/2: $5\bh_cnt[31:0]
     2/2: $4\bh_cnt[31:0]
Creating decoders for process `\Hazard_Unit.$proc$./codes/hazard_unit.v:70$82'.
     1/8: $6\dh_cnt1[31:0]
     2/8: $6\dh_cnt2[31:0]
     3/8: $5\dh_cnt2[31:0]
     4/8: $5\dh_cnt1[31:0]
     5/8: $4\ind_r[1:0]
     6/8: $4\dh_cnt2[31:0]
     7/8: $4\dh_cnt1[31:0]
     8/8: $3\ind_r[1:0]
Creating decoders for process `\Hazard_Unit.$proc$./codes/hazard_unit.v:54$73'.
     1/9: $3\bh_cnt[31:0]
     2/9: $2\ind_r[1:0]
     3/9: $3\dh_cnt2[31:0]
     4/9: $1\ind_r[1:0]
     5/9: $3\dh_cnt1[31:0]
     6/9: $2\bh_cnt[31:0]
     7/9: $2\dh_cnt2[31:0]
     8/9: $0\ind_r[1:0]
     9/9: $2\dh_cnt1[31:0]
Creating decoders for process `\Hazard_Unit.$proc$./codes/hazard_unit.v:40$66'.
     1/6: $1\bh_cnt[31:0]
     2/6: $1\dh_cnt2[31:0]
     3/6: $1\dh_cnt1[31:0]
     4/6: $0\bh_cnt[31:0]
     5/6: $0\dh_cnt2[31:0]
     6/6: $0\dh_cnt1[31:0]
Creating decoders for process `\EXE_buffer.$proc$./codes/EXE_buffer.v:35$33'.
     1/4: $0\EXE_rd_r[4:0]
     2/4: $0\EXE_out_r[63:0]
     3/4: $0\EXE_WriteBack_r[0:0]
     4/4: $0\EXE_Finish_r[0:0]
Creating decoders for process `\EXE_buffer.$proc$./codes/EXE_buffer.v:28$32'.
     1/4: $0\EXE_rd_w[4:0]
     2/4: $0\EXE_out_w[63:0]
     3/4: $0\EXE_WriteBack_w[0:0]
     4/4: $0\EXE_Finish_w[0:0]
Creating decoders for process `\Control.$proc$./codes/control.v:27$31'.
     1/13: $1\o_MemRead_r[0:0]
     2/13: $1\o_finish_r[0:0]
     3/13: $1\o_ExeOpcode_r[9:0]
     4/13: $1\o_MemWrite_r[0:0]
     5/13: $1\o_WriteBack_r[0:0]
     6/13: $0\o_finish_r[0:0]
     7/13: $0\o_ExeOpcode_r[9:0]
     8/13: $0\o_MemWrite_r[0:0]
     9/13: $0\o_MemRead_r[0:0]
    10/13: $0\o_WriteBack_r[0:0]
    11/13: $0\func7[6:0]
    12/13: $0\func3[2:0]
    13/13: $0\opcode[6:0]
Creating decoders for process `\ALU.$proc$./codes/alu.v:14$1'.
     1/2: $1\out_r[63:0]
     2/2: $0\out_r[63:0]

20.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\PC.\o_i_addr_w' from process `\PC.$proc$./codes/pc.v:19$138'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$178_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.\i' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$178_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$179_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$179_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$180_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$180_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$181_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$181_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$182_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$182_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$183_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$183_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$184_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$184_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$185_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$185_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$186_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$186_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$187_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$187_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$188_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$188_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$189_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$189_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$190_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$190_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$191_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$191_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$192_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$192_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$193_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$193_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$194_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$194_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$195_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$195_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$196_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$196_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$197_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$197_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$198_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$198_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$199_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$199_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$200_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$200_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$201_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$201_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$202_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$202_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$203_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$203_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$204_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$204_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$205_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$205_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$206_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$206_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$207_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$207_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$208_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$208_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$209_ADDR' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.$memwr$\x$./codes/register.v:21$209_DATA' from process `\Register.$proc$./codes/register.v:19$335'.
No latch inferred for signal `\Register.\i' from process `\Register.$proc$./codes/register.v:17$334'.
No latch inferred for signal `\MEM2_buffer.\MEM2_Memread_w' from process `\MEM2_buffer.$proc$./codes/MEM2_buffer.v:17$126'.
No latch inferred for signal `\MEM2_buffer.\MEM2_rd_w' from process `\MEM2_buffer.$proc$./codes/MEM2_buffer.v:17$126'.
No latch inferred for signal `\MEM1_buffer.\MEM1_rd_w' from process `\MEM1_buffer.$proc$./codes/MEM1_buffer.v:15$124'.
No latch inferred for signal `\MEM1_buffer.\MEM1_MemRead_w' from process `\MEM1_buffer.$proc$./codes/MEM1_buffer.v:15$124'.
Latch inferred for signal `\Imm_Gen.\imm [3:0]' from process `\Imm_Gen.$proc$./codes/imm_generator.v:12$121': $auto$proc_dlatch.cc:409:proc_dlatch$652
Latch inferred for signal `\Imm_Gen.\imm [4]' from process `\Imm_Gen.$proc$./codes/imm_generator.v:12$121': $auto$proc_dlatch.cc:409:proc_dlatch$681
Latch inferred for signal `\Imm_Gen.\imm [9:5]' from process `\Imm_Gen.$proc$./codes/imm_generator.v:12$121': $auto$proc_dlatch.cc:409:proc_dlatch$710
Latch inferred for signal `\Imm_Gen.\imm [10]' from process `\Imm_Gen.$proc$./codes/imm_generator.v:12$121': $auto$proc_dlatch.cc:409:proc_dlatch$739
Latch inferred for signal `\Imm_Gen.\imm [11]' from process `\Imm_Gen.$proc$./codes/imm_generator.v:12$121': $auto$proc_dlatch.cc:409:proc_dlatch$768
No latch inferred for signal `\IF_buffer.\ind_r' from process `\IF_buffer.$proc$./codes/IF_buffer.v:17$120'.
No latch inferred for signal `\IF_buffer.\ind_w' from process `\IF_buffer.$proc$./codes/IF_buffer.v:25$114'.
No latch inferred for signal `\ID_buffer.\Finish_w' from process `\ID_buffer.$proc$./codes/ID_buffer.v:51$90'.
No latch inferred for signal `\ID_buffer.\MemRead_w' from process `\ID_buffer.$proc$./codes/ID_buffer.v:51$90'.
No latch inferred for signal `\ID_buffer.\MemWrite_w' from process `\ID_buffer.$proc$./codes/ID_buffer.v:51$90'.
No latch inferred for signal `\ID_buffer.\ExeOpcode_w' from process `\ID_buffer.$proc$./codes/ID_buffer.v:51$90'.
No latch inferred for signal `\ID_buffer.\WriteBack_w' from process `\ID_buffer.$proc$./codes/ID_buffer.v:51$90'.
No latch inferred for signal `\ID_buffer.\r1_w' from process `\ID_buffer.$proc$./codes/ID_buffer.v:51$90'.
No latch inferred for signal `\ID_buffer.\r2_w' from process `\ID_buffer.$proc$./codes/ID_buffer.v:51$90'.
No latch inferred for signal `\ID_buffer.\immediate_w' from process `\ID_buffer.$proc$./codes/ID_buffer.v:51$90'.
No latch inferred for signal `\ID_buffer.\rs1_w' from process `\ID_buffer.$proc$./codes/ID_buffer.v:51$90'.
No latch inferred for signal `\ID_buffer.\rs2_w' from process `\ID_buffer.$proc$./codes/ID_buffer.v:51$90'.
No latch inferred for signal `\ID_buffer.\rd_w' from process `\ID_buffer.$proc$./codes/ID_buffer.v:51$90'.
No latch inferred for signal `\EXE_buffer.\EXE_Finish_w' from process `\EXE_buffer.$proc$./codes/EXE_buffer.v:28$32'.
No latch inferred for signal `\EXE_buffer.\EXE_WriteBack_w' from process `\EXE_buffer.$proc$./codes/EXE_buffer.v:28$32'.
No latch inferred for signal `\EXE_buffer.\EXE_out_w' from process `\EXE_buffer.$proc$./codes/EXE_buffer.v:28$32'.
No latch inferred for signal `\EXE_buffer.\EXE_rd_w' from process `\EXE_buffer.$proc$./codes/EXE_buffer.v:28$32'.
No latch inferred for signal `\Control.\opcode' from process `\Control.$proc$./codes/control.v:27$31'.
No latch inferred for signal `\Control.\o_WriteBack_r' from process `\Control.$proc$./codes/control.v:27$31'.
No latch inferred for signal `\Control.\o_MemRead_r' from process `\Control.$proc$./codes/control.v:27$31'.
No latch inferred for signal `\Control.\o_MemWrite_r' from process `\Control.$proc$./codes/control.v:27$31'.
No latch inferred for signal `\Control.\o_ExeOpcode_r' from process `\Control.$proc$./codes/control.v:27$31'.
No latch inferred for signal `\Control.\o_finish_r' from process `\Control.$proc$./codes/control.v:27$31'.
No latch inferred for signal `\Control.\func3' from process `\Control.$proc$./codes/control.v:27$31'.
No latch inferred for signal `\Control.\func7' from process `\Control.$proc$./codes/control.v:27$31'.
Latch inferred for signal `\ALU.\out_r' from process `\ALU.$proc$./codes/alu.v:14$1': $auto$proc_dlatch.cc:409:proc_dlatch$797

20.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\PC.\o_i_addr_r' using process `\PC.$proc$./codes/pc.v:31$142'.
  created $adff cell `$procdff$868' with positive edge clock and negative level reset.
Creating register for signal `\Register.$memwr$\x$./codes/register.v:40$210_ADDR' using process `\Register.$proc$./codes/register.v:37$279'.
  created $dff cell `$procdff$869' with negative edge clock.
Creating register for signal `\Register.$memwr$\x$./codes/register.v:40$210_DATA' using process `\Register.$proc$./codes/register.v:37$279'.
  created $dff cell `$procdff$870' with negative edge clock.
Creating register for signal `\Register.$memwr$\x$./codes/register.v:40$210_EN' using process `\Register.$proc$./codes/register.v:37$279'.
  created $dff cell `$procdff$871' with negative edge clock.
Creating register for signal `\Register.$memwr$\x$./codes/register.v:43$211_ADDR' using process `\Register.$proc$./codes/register.v:37$279'.
  created $dff cell `$procdff$872' with negative edge clock.
Creating register for signal `\Register.$memwr$\x$./codes/register.v:43$211_DATA' using process `\Register.$proc$./codes/register.v:37$279'.
  created $dff cell `$procdff$873' with negative edge clock.
Creating register for signal `\Register.$memwr$\x$./codes/register.v:43$211_EN' using process `\Register.$proc$./codes/register.v:37$279'.
  created $dff cell `$procdff$874' with negative edge clock.
Creating register for signal `\Register.$memwr$\x$./codes/register.v:44$212_ADDR' using process `\Register.$proc$./codes/register.v:37$279'.
  created $dff cell `$procdff$875' with negative edge clock.
Creating register for signal `\Register.$memwr$\x$./codes/register.v:44$212_DATA' using process `\Register.$proc$./codes/register.v:37$279'.
  created $dff cell `$procdff$876' with negative edge clock.
Creating register for signal `\Register.$memwr$\x$./codes/register.v:44$212_EN' using process `\Register.$proc$./codes/register.v:37$279'.
  created $dff cell `$procdff$877' with negative edge clock.
Creating register for signal `\Register.$memwr$\x$./codes/register.v:48$213_ADDR' using process `\Register.$proc$./codes/register.v:37$279'.
  created $dff cell `$procdff$878' with negative edge clock.
Creating register for signal `\Register.$memwr$\x$./codes/register.v:48$213_DATA' using process `\Register.$proc$./codes/register.v:37$279'.
  created $dff cell `$procdff$879' with negative edge clock.
Creating register for signal `\Register.$memwr$\x$./codes/register.v:48$213_EN' using process `\Register.$proc$./codes/register.v:37$279'.
  created $dff cell `$procdff$880' with negative edge clock.
Creating register for signal `\Register.$memwr$\x$./codes/register.v:51$214_ADDR' using process `\Register.$proc$./codes/register.v:37$279'.
  created $dff cell `$procdff$881' with negative edge clock.
Creating register for signal `\Register.$memwr$\x$./codes/register.v:51$214_DATA' using process `\Register.$proc$./codes/register.v:37$279'.
  created $dff cell `$procdff$882' with negative edge clock.
Creating register for signal `\Register.$memwr$\x$./codes/register.v:51$214_EN' using process `\Register.$proc$./codes/register.v:37$279'.
  created $dff cell `$procdff$883' with negative edge clock.
Creating register for signal `\MEM2_buffer.\MEM2_Memread_r' using process `\MEM2_buffer.$proc$./codes/MEM2_buffer.v:22$127'.
  created $dff cell `$procdff$884' with positive edge clock.
Creating register for signal `\MEM2_buffer.\MEM2_rd_r' using process `\MEM2_buffer.$proc$./codes/MEM2_buffer.v:22$127'.
  created $dff cell `$procdff$885' with positive edge clock.
Creating register for signal `\MEM1_buffer.\MEM1_rd_r' using process `\MEM1_buffer.$proc$./codes/MEM1_buffer.v:20$125'.
  created $dff cell `$procdff$886' with positive edge clock.
Creating register for signal `\MEM1_buffer.\MEM1_MemRead_r' using process `\MEM1_buffer.$proc$./codes/MEM1_buffer.v:20$125'.
  created $dff cell `$procdff$887' with positive edge clock.
Creating register for signal `\IF_buffer.\IF1' using process `\IF_buffer.$proc$./codes/IF_buffer.v:44$119'.
  created $dff cell `$procdff$888' with negative edge clock.
Creating register for signal `\IF_buffer.\IF0' using process `\IF_buffer.$proc$./codes/IF_buffer.v:44$119'.
  created $dff cell `$procdff$889' with negative edge clock.
Creating register for signal `\IF_buffer.\IF2' using process `\IF_buffer.$proc$./codes/IF_buffer.v:44$119'.
  created $dff cell `$procdff$890' with negative edge clock.
Creating register for signal `\IF_buffer.\o_inst_r' using process `\IF_buffer.$proc$./codes/IF_buffer.v:29$115'.
  created $dff cell `$procdff$891' with positive edge clock.
Creating register for signal `\ID_buffer.\Finish_r' using process `\ID_buffer.$proc$./codes/ID_buffer.v:65$113'.
  created $dff cell `$procdff$892' with positive edge clock.
Creating register for signal `\ID_buffer.\MemRead_r' using process `\ID_buffer.$proc$./codes/ID_buffer.v:65$113'.
  created $dff cell `$procdff$893' with positive edge clock.
Creating register for signal `\ID_buffer.\MemWrite_r' using process `\ID_buffer.$proc$./codes/ID_buffer.v:65$113'.
  created $dff cell `$procdff$894' with positive edge clock.
Creating register for signal `\ID_buffer.\ExeOpcode_r' using process `\ID_buffer.$proc$./codes/ID_buffer.v:65$113'.
  created $dff cell `$procdff$895' with positive edge clock.
Creating register for signal `\ID_buffer.\WriteBack_r' using process `\ID_buffer.$proc$./codes/ID_buffer.v:65$113'.
  created $dff cell `$procdff$896' with positive edge clock.
Creating register for signal `\ID_buffer.\r1_r' using process `\ID_buffer.$proc$./codes/ID_buffer.v:65$113'.
  created $dff cell `$procdff$897' with positive edge clock.
Creating register for signal `\ID_buffer.\r2_r' using process `\ID_buffer.$proc$./codes/ID_buffer.v:65$113'.
  created $dff cell `$procdff$898' with positive edge clock.
Creating register for signal `\ID_buffer.\immediate_r' using process `\ID_buffer.$proc$./codes/ID_buffer.v:65$113'.
  created $dff cell `$procdff$899' with positive edge clock.
Creating register for signal `\ID_buffer.\rs1_r' using process `\ID_buffer.$proc$./codes/ID_buffer.v:65$113'.
  created $dff cell `$procdff$900' with positive edge clock.
Creating register for signal `\ID_buffer.\rs2_r' using process `\ID_buffer.$proc$./codes/ID_buffer.v:65$113'.
  created $dff cell `$procdff$901' with positive edge clock.
Creating register for signal `\ID_buffer.\rd_r' using process `\ID_buffer.$proc$./codes/ID_buffer.v:65$113'.
  created $dff cell `$procdff$902' with positive edge clock.
Creating register for signal `\Hazard_Unit.\bh_cnt' using process `\Hazard_Unit.$proc$./codes/hazard_unit.v:83$85'.
  created $dff cell `$procdff$903' with negative edge clock.
Creating register for signal `\Hazard_Unit.\ind_r' using process `\Hazard_Unit.$proc$./codes/hazard_unit.v:70$82'.
  created $dff cell `$procdff$904' with negative edge clock.
Creating register for signal `\Hazard_Unit.\dh_cnt1' using process `\Hazard_Unit.$proc$./codes/hazard_unit.v:70$82'.
  created $dff cell `$procdff$905' with negative edge clock.
Creating register for signal `\Hazard_Unit.\dh_cnt2' using process `\Hazard_Unit.$proc$./codes/hazard_unit.v:70$82'.
  created $dff cell `$procdff$906' with negative edge clock.
Creating register for signal `\Hazard_Unit.\ind_r' using process `\Hazard_Unit.$proc$./codes/hazard_unit.v:54$73'.
  created $dff cell `$procdff$907' with negative edge clock.
Creating register for signal `\Hazard_Unit.\bh_cnt' using process `\Hazard_Unit.$proc$./codes/hazard_unit.v:54$73'.
  created $dff cell `$procdff$908' with negative edge clock.
Creating register for signal `\Hazard_Unit.\dh_cnt1' using process `\Hazard_Unit.$proc$./codes/hazard_unit.v:54$73'.
  created $dff cell `$procdff$909' with negative edge clock.
Creating register for signal `\Hazard_Unit.\dh_cnt2' using process `\Hazard_Unit.$proc$./codes/hazard_unit.v:54$73'.
  created $dff cell `$procdff$910' with negative edge clock.
Creating register for signal `\Hazard_Unit.\bh_cnt' using process `\Hazard_Unit.$proc$./codes/hazard_unit.v:40$66'.
  created $dff cell `$procdff$911' with positive edge clock.
Creating register for signal `\Hazard_Unit.\dh_cnt1' using process `\Hazard_Unit.$proc$./codes/hazard_unit.v:40$66'.
  created $dff cell `$procdff$912' with positive edge clock.
Creating register for signal `\Hazard_Unit.\dh_cnt2' using process `\Hazard_Unit.$proc$./codes/hazard_unit.v:40$66'.
  created $dff cell `$procdff$913' with positive edge clock.
Creating register for signal `\EXE_buffer.\EXE_Finish_r' using process `\EXE_buffer.$proc$./codes/EXE_buffer.v:35$33'.
  created $dff cell `$procdff$914' with positive edge clock.
Creating register for signal `\EXE_buffer.\EXE_WriteBack_r' using process `\EXE_buffer.$proc$./codes/EXE_buffer.v:35$33'.
  created $dff cell `$procdff$915' with positive edge clock.
Creating register for signal `\EXE_buffer.\EXE_out_r' using process `\EXE_buffer.$proc$./codes/EXE_buffer.v:35$33'.
  created $dff cell `$procdff$916' with positive edge clock.
Creating register for signal `\EXE_buffer.\EXE_rd_r' using process `\EXE_buffer.$proc$./codes/EXE_buffer.v:35$33'.
  created $dff cell `$procdff$917' with positive edge clock.

20.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `PC.$proc$./codes/pc.v:14$145'.
Removing empty process `PC.$proc$./codes/pc.v:13$144'.
Removing empty process `PC.$proc$./codes/pc.v:31$142'.
Found and cleaned up 2 empty switches in `\PC.$proc$./codes/pc.v:19$138'.
Removing empty process `PC.$proc$./codes/pc.v:19$138'.
Removing empty process `Register.$proc$./codes/register.v:19$335'.
Removing empty process `Register.$proc$./codes/register.v:17$334'.
Found and cleaned up 4 empty switches in `\Register.$proc$./codes/register.v:37$279'.
Removing empty process `Register.$proc$./codes/register.v:37$279'.
Removing empty process `MEM2_buffer.$proc$./codes/MEM2_buffer.v:22$127'.
Removing empty process `MEM2_buffer.$proc$./codes/MEM2_buffer.v:17$126'.
Removing empty process `MEM1_buffer.$proc$./codes/MEM1_buffer.v:20$125'.
Removing empty process `MEM1_buffer.$proc$./codes/MEM1_buffer.v:15$124'.
Found and cleaned up 1 empty switch in `\Imm_Gen.$proc$./codes/imm_generator.v:12$121'.
Removing empty process `Imm_Gen.$proc$./codes/imm_generator.v:12$121'.
Removing empty process `IF_buffer.$proc$./codes/IF_buffer.v:17$120'.
Removing empty process `IF_buffer.$proc$./codes/IF_buffer.v:44$119'.
Found and cleaned up 4 empty switches in `\IF_buffer.$proc$./codes/IF_buffer.v:29$115'.
Removing empty process `IF_buffer.$proc$./codes/IF_buffer.v:29$115'.
Removing empty process `IF_buffer.$proc$./codes/IF_buffer.v:25$114'.
Removing empty process `ID_buffer.$proc$./codes/ID_buffer.v:65$113'.
Removing empty process `ID_buffer.$proc$./codes/ID_buffer.v:51$90'.
Removing empty process `Hazard_Unit.$proc$./codes/hazard_unit.v:38$89'.
Removing empty process `Hazard_Unit.$proc$./codes/hazard_unit.v:37$88'.
Removing empty process `Hazard_Unit.$proc$./codes/hazard_unit.v:36$87'.
Removing empty process `Hazard_Unit.$proc$./codes/hazard_unit.v:31$86'.
Found and cleaned up 1 empty switch in `\Hazard_Unit.$proc$./codes/hazard_unit.v:83$85'.
Removing empty process `Hazard_Unit.$proc$./codes/hazard_unit.v:83$85'.
Found and cleaned up 2 empty switches in `\Hazard_Unit.$proc$./codes/hazard_unit.v:70$82'.
Removing empty process `Hazard_Unit.$proc$./codes/hazard_unit.v:70$82'.
Found and cleaned up 3 empty switches in `\Hazard_Unit.$proc$./codes/hazard_unit.v:54$73'.
Removing empty process `Hazard_Unit.$proc$./codes/hazard_unit.v:54$73'.
Found and cleaned up 3 empty switches in `\Hazard_Unit.$proc$./codes/hazard_unit.v:40$66'.
Removing empty process `Hazard_Unit.$proc$./codes/hazard_unit.v:40$66'.
Removing empty process `EXE_buffer.$proc$./codes/EXE_buffer.v:35$33'.
Removing empty process `EXE_buffer.$proc$./codes/EXE_buffer.v:28$32'.
Found and cleaned up 1 empty switch in `\Control.$proc$./codes/control.v:27$31'.
Removing empty process `Control.$proc$./codes/control.v:27$31'.
Found and cleaned up 1 empty switch in `\ALU.$proc$./codes/alu.v:14$1'.
Removing empty process `ALU.$proc$./codes/alu.v:14$1'.
Cleaned up 22 empty switches.

20.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module PC.
Optimizing module Multiplexer32.
Optimizing module Multiplexer8.
<suppressed ~2 debug messages>
Optimizing module Multiplexer4.
<suppressed ~6 debug messages>
Optimizing module Register.
Optimizing module MEM2_buffer.
Optimizing module MEM1_buffer.
Optimizing module Mem_adder.
Optimizing module Imm_Gen.
<suppressed ~30 debug messages>
Optimizing module IF_buffer.
<suppressed ~1 debug messages>
Optimizing module ID_buffer.
<suppressed ~2 debug messages>
Optimizing module Hazard_Unit.
<suppressed ~3 debug messages>
Optimizing module Forward_Unit.
Optimizing module EXE_buffer.
Optimizing module cpu.
Optimizing module Control.
Optimizing module BranchUnit.
<suppressed ~6 debug messages>
Optimizing module ALU.
<suppressed ~13 debug messages>

20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \PC..
Finding unused cells or wires in module \Multiplexer32..
Finding unused cells or wires in module \Multiplexer8..
Finding unused cells or wires in module \Multiplexer4..
Finding unused cells or wires in module \Register..
Finding unused cells or wires in module \MEM2_buffer..
Finding unused cells or wires in module \MEM1_buffer..
Finding unused cells or wires in module \Mem_adder..
Finding unused cells or wires in module \Imm_Gen..
Finding unused cells or wires in module \IF_buffer..
Finding unused cells or wires in module \ID_buffer..
Finding unused cells or wires in module \Hazard_Unit..
Finding unused cells or wires in module \Forward_Unit..
Finding unused cells or wires in module \EXE_buffer..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \BranchUnit..
Finding unused cells or wires in module \ALU..
Removed 6 unused cells and 410 unused wires.
<suppressed ~32 debug messages>

20.5. Executing CHECK pass (checking for obvious problems).
checking module ALU..
checking module BranchUnit..
checking module Control..
checking module EXE_buffer..
checking module Forward_Unit..
checking module Hazard_Unit..
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [31]:
    port Q[31] of cell $procdff$906 ($dff)
    port Q[31] of cell $procdff$910 ($dff)
    port Q[31] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [30]:
    port Q[30] of cell $procdff$906 ($dff)
    port Q[30] of cell $procdff$910 ($dff)
    port Q[30] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [29]:
    port Q[29] of cell $procdff$906 ($dff)
    port Q[29] of cell $procdff$910 ($dff)
    port Q[29] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [28]:
    port Q[28] of cell $procdff$906 ($dff)
    port Q[28] of cell $procdff$910 ($dff)
    port Q[28] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [27]:
    port Q[27] of cell $procdff$906 ($dff)
    port Q[27] of cell $procdff$910 ($dff)
    port Q[27] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [26]:
    port Q[26] of cell $procdff$906 ($dff)
    port Q[26] of cell $procdff$910 ($dff)
    port Q[26] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [25]:
    port Q[25] of cell $procdff$906 ($dff)
    port Q[25] of cell $procdff$910 ($dff)
    port Q[25] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [24]:
    port Q[24] of cell $procdff$906 ($dff)
    port Q[24] of cell $procdff$910 ($dff)
    port Q[24] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [23]:
    port Q[23] of cell $procdff$906 ($dff)
    port Q[23] of cell $procdff$910 ($dff)
    port Q[23] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [22]:
    port Q[22] of cell $procdff$906 ($dff)
    port Q[22] of cell $procdff$910 ($dff)
    port Q[22] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [21]:
    port Q[21] of cell $procdff$906 ($dff)
    port Q[21] of cell $procdff$910 ($dff)
    port Q[21] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [20]:
    port Q[20] of cell $procdff$906 ($dff)
    port Q[20] of cell $procdff$910 ($dff)
    port Q[20] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [19]:
    port Q[19] of cell $procdff$906 ($dff)
    port Q[19] of cell $procdff$910 ($dff)
    port Q[19] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [18]:
    port Q[18] of cell $procdff$906 ($dff)
    port Q[18] of cell $procdff$910 ($dff)
    port Q[18] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [17]:
    port Q[17] of cell $procdff$906 ($dff)
    port Q[17] of cell $procdff$910 ($dff)
    port Q[17] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [16]:
    port Q[16] of cell $procdff$906 ($dff)
    port Q[16] of cell $procdff$910 ($dff)
    port Q[16] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [15]:
    port Q[15] of cell $procdff$906 ($dff)
    port Q[15] of cell $procdff$910 ($dff)
    port Q[15] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [14]:
    port Q[14] of cell $procdff$906 ($dff)
    port Q[14] of cell $procdff$910 ($dff)
    port Q[14] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [13]:
    port Q[13] of cell $procdff$906 ($dff)
    port Q[13] of cell $procdff$910 ($dff)
    port Q[13] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [12]:
    port Q[12] of cell $procdff$906 ($dff)
    port Q[12] of cell $procdff$910 ($dff)
    port Q[12] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [11]:
    port Q[11] of cell $procdff$906 ($dff)
    port Q[11] of cell $procdff$910 ($dff)
    port Q[11] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [10]:
    port Q[10] of cell $procdff$906 ($dff)
    port Q[10] of cell $procdff$910 ($dff)
    port Q[10] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [9]:
    port Q[9] of cell $procdff$906 ($dff)
    port Q[9] of cell $procdff$910 ($dff)
    port Q[9] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [8]:
    port Q[8] of cell $procdff$906 ($dff)
    port Q[8] of cell $procdff$910 ($dff)
    port Q[8] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [7]:
    port Q[7] of cell $procdff$906 ($dff)
    port Q[7] of cell $procdff$910 ($dff)
    port Q[7] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [6]:
    port Q[6] of cell $procdff$906 ($dff)
    port Q[6] of cell $procdff$910 ($dff)
    port Q[6] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [5]:
    port Q[5] of cell $procdff$906 ($dff)
    port Q[5] of cell $procdff$910 ($dff)
    port Q[5] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [4]:
    port Q[4] of cell $procdff$906 ($dff)
    port Q[4] of cell $procdff$910 ($dff)
    port Q[4] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [3]:
    port Q[3] of cell $procdff$906 ($dff)
    port Q[3] of cell $procdff$910 ($dff)
    port Q[3] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [2]:
    port Q[2] of cell $procdff$906 ($dff)
    port Q[2] of cell $procdff$910 ($dff)
    port Q[2] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [1]:
    port Q[1] of cell $procdff$906 ($dff)
    port Q[1] of cell $procdff$910 ($dff)
    port Q[1] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [0]:
    port Q[0] of cell $procdff$906 ($dff)
    port Q[0] of cell $procdff$910 ($dff)
    port Q[0] of cell $procdff$913 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [31]:
    port Q[31] of cell $procdff$905 ($dff)
    port Q[31] of cell $procdff$909 ($dff)
    port Q[31] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [30]:
    port Q[30] of cell $procdff$905 ($dff)
    port Q[30] of cell $procdff$909 ($dff)
    port Q[30] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [29]:
    port Q[29] of cell $procdff$905 ($dff)
    port Q[29] of cell $procdff$909 ($dff)
    port Q[29] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [28]:
    port Q[28] of cell $procdff$905 ($dff)
    port Q[28] of cell $procdff$909 ($dff)
    port Q[28] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [27]:
    port Q[27] of cell $procdff$905 ($dff)
    port Q[27] of cell $procdff$909 ($dff)
    port Q[27] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [26]:
    port Q[26] of cell $procdff$905 ($dff)
    port Q[26] of cell $procdff$909 ($dff)
    port Q[26] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [25]:
    port Q[25] of cell $procdff$905 ($dff)
    port Q[25] of cell $procdff$909 ($dff)
    port Q[25] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [24]:
    port Q[24] of cell $procdff$905 ($dff)
    port Q[24] of cell $procdff$909 ($dff)
    port Q[24] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [23]:
    port Q[23] of cell $procdff$905 ($dff)
    port Q[23] of cell $procdff$909 ($dff)
    port Q[23] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [22]:
    port Q[22] of cell $procdff$905 ($dff)
    port Q[22] of cell $procdff$909 ($dff)
    port Q[22] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [21]:
    port Q[21] of cell $procdff$905 ($dff)
    port Q[21] of cell $procdff$909 ($dff)
    port Q[21] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [20]:
    port Q[20] of cell $procdff$905 ($dff)
    port Q[20] of cell $procdff$909 ($dff)
    port Q[20] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [19]:
    port Q[19] of cell $procdff$905 ($dff)
    port Q[19] of cell $procdff$909 ($dff)
    port Q[19] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [18]:
    port Q[18] of cell $procdff$905 ($dff)
    port Q[18] of cell $procdff$909 ($dff)
    port Q[18] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [17]:
    port Q[17] of cell $procdff$905 ($dff)
    port Q[17] of cell $procdff$909 ($dff)
    port Q[17] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [16]:
    port Q[16] of cell $procdff$905 ($dff)
    port Q[16] of cell $procdff$909 ($dff)
    port Q[16] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [15]:
    port Q[15] of cell $procdff$905 ($dff)
    port Q[15] of cell $procdff$909 ($dff)
    port Q[15] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [14]:
    port Q[14] of cell $procdff$905 ($dff)
    port Q[14] of cell $procdff$909 ($dff)
    port Q[14] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [13]:
    port Q[13] of cell $procdff$905 ($dff)
    port Q[13] of cell $procdff$909 ($dff)
    port Q[13] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [12]:
    port Q[12] of cell $procdff$905 ($dff)
    port Q[12] of cell $procdff$909 ($dff)
    port Q[12] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [11]:
    port Q[11] of cell $procdff$905 ($dff)
    port Q[11] of cell $procdff$909 ($dff)
    port Q[11] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [10]:
    port Q[10] of cell $procdff$905 ($dff)
    port Q[10] of cell $procdff$909 ($dff)
    port Q[10] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [9]:
    port Q[9] of cell $procdff$905 ($dff)
    port Q[9] of cell $procdff$909 ($dff)
    port Q[9] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [8]:
    port Q[8] of cell $procdff$905 ($dff)
    port Q[8] of cell $procdff$909 ($dff)
    port Q[8] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [7]:
    port Q[7] of cell $procdff$905 ($dff)
    port Q[7] of cell $procdff$909 ($dff)
    port Q[7] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [6]:
    port Q[6] of cell $procdff$905 ($dff)
    port Q[6] of cell $procdff$909 ($dff)
    port Q[6] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [5]:
    port Q[5] of cell $procdff$905 ($dff)
    port Q[5] of cell $procdff$909 ($dff)
    port Q[5] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [4]:
    port Q[4] of cell $procdff$905 ($dff)
    port Q[4] of cell $procdff$909 ($dff)
    port Q[4] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [3]:
    port Q[3] of cell $procdff$905 ($dff)
    port Q[3] of cell $procdff$909 ($dff)
    port Q[3] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [2]:
    port Q[2] of cell $procdff$905 ($dff)
    port Q[2] of cell $procdff$909 ($dff)
    port Q[2] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [1]:
    port Q[1] of cell $procdff$905 ($dff)
    port Q[1] of cell $procdff$909 ($dff)
    port Q[1] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [0]:
    port Q[0] of cell $procdff$905 ($dff)
    port Q[0] of cell $procdff$909 ($dff)
    port Q[0] of cell $procdff$912 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\ind_r [1]:
    port Q[1] of cell $procdff$904 ($dff)
    port Q[1] of cell $procdff$907 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\ind_r [0]:
    port Q[0] of cell $procdff$904 ($dff)
    port Q[0] of cell $procdff$907 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [31]:
    port Q[31] of cell $procdff$903 ($dff)
    port Q[31] of cell $procdff$908 ($dff)
    port Q[31] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [30]:
    port Q[30] of cell $procdff$903 ($dff)
    port Q[30] of cell $procdff$908 ($dff)
    port Q[30] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [29]:
    port Q[29] of cell $procdff$903 ($dff)
    port Q[29] of cell $procdff$908 ($dff)
    port Q[29] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [28]:
    port Q[28] of cell $procdff$903 ($dff)
    port Q[28] of cell $procdff$908 ($dff)
    port Q[28] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [27]:
    port Q[27] of cell $procdff$903 ($dff)
    port Q[27] of cell $procdff$908 ($dff)
    port Q[27] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [26]:
    port Q[26] of cell $procdff$903 ($dff)
    port Q[26] of cell $procdff$908 ($dff)
    port Q[26] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [25]:
    port Q[25] of cell $procdff$903 ($dff)
    port Q[25] of cell $procdff$908 ($dff)
    port Q[25] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [24]:
    port Q[24] of cell $procdff$903 ($dff)
    port Q[24] of cell $procdff$908 ($dff)
    port Q[24] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [23]:
    port Q[23] of cell $procdff$903 ($dff)
    port Q[23] of cell $procdff$908 ($dff)
    port Q[23] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [22]:
    port Q[22] of cell $procdff$903 ($dff)
    port Q[22] of cell $procdff$908 ($dff)
    port Q[22] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [21]:
    port Q[21] of cell $procdff$903 ($dff)
    port Q[21] of cell $procdff$908 ($dff)
    port Q[21] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [20]:
    port Q[20] of cell $procdff$903 ($dff)
    port Q[20] of cell $procdff$908 ($dff)
    port Q[20] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [19]:
    port Q[19] of cell $procdff$903 ($dff)
    port Q[19] of cell $procdff$908 ($dff)
    port Q[19] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [18]:
    port Q[18] of cell $procdff$903 ($dff)
    port Q[18] of cell $procdff$908 ($dff)
    port Q[18] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [17]:
    port Q[17] of cell $procdff$903 ($dff)
    port Q[17] of cell $procdff$908 ($dff)
    port Q[17] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [16]:
    port Q[16] of cell $procdff$903 ($dff)
    port Q[16] of cell $procdff$908 ($dff)
    port Q[16] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [15]:
    port Q[15] of cell $procdff$903 ($dff)
    port Q[15] of cell $procdff$908 ($dff)
    port Q[15] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [14]:
    port Q[14] of cell $procdff$903 ($dff)
    port Q[14] of cell $procdff$908 ($dff)
    port Q[14] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [13]:
    port Q[13] of cell $procdff$903 ($dff)
    port Q[13] of cell $procdff$908 ($dff)
    port Q[13] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [12]:
    port Q[12] of cell $procdff$903 ($dff)
    port Q[12] of cell $procdff$908 ($dff)
    port Q[12] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [11]:
    port Q[11] of cell $procdff$903 ($dff)
    port Q[11] of cell $procdff$908 ($dff)
    port Q[11] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [10]:
    port Q[10] of cell $procdff$903 ($dff)
    port Q[10] of cell $procdff$908 ($dff)
    port Q[10] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [9]:
    port Q[9] of cell $procdff$903 ($dff)
    port Q[9] of cell $procdff$908 ($dff)
    port Q[9] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [8]:
    port Q[8] of cell $procdff$903 ($dff)
    port Q[8] of cell $procdff$908 ($dff)
    port Q[8] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [7]:
    port Q[7] of cell $procdff$903 ($dff)
    port Q[7] of cell $procdff$908 ($dff)
    port Q[7] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [6]:
    port Q[6] of cell $procdff$903 ($dff)
    port Q[6] of cell $procdff$908 ($dff)
    port Q[6] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [5]:
    port Q[5] of cell $procdff$903 ($dff)
    port Q[5] of cell $procdff$908 ($dff)
    port Q[5] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [4]:
    port Q[4] of cell $procdff$903 ($dff)
    port Q[4] of cell $procdff$908 ($dff)
    port Q[4] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [3]:
    port Q[3] of cell $procdff$903 ($dff)
    port Q[3] of cell $procdff$908 ($dff)
    port Q[3] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [2]:
    port Q[2] of cell $procdff$903 ($dff)
    port Q[2] of cell $procdff$908 ($dff)
    port Q[2] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [1]:
    port Q[1] of cell $procdff$903 ($dff)
    port Q[1] of cell $procdff$908 ($dff)
    port Q[1] of cell $procdff$911 ($dff)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [0]:
    port Q[0] of cell $procdff$903 ($dff)
    port Q[0] of cell $procdff$908 ($dff)
    port Q[0] of cell $procdff$911 ($dff)
checking module ID_buffer..
checking module IF_buffer..
checking module Imm_Gen..
checking module MEM1_buffer..
checking module MEM2_buffer..
checking module Mem_adder..
checking module Multiplexer32..
checking module Multiplexer4..
checking module Multiplexer8..
checking module PC..
checking module Register..
checking module cpu..
found and reported 98 problems.

20.6. Executing OPT pass (performing simple optimizations).

20.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
Optimizing module BranchUnit.
Optimizing module Control.
Optimizing module EXE_buffer.
Optimizing module Forward_Unit.
Optimizing module Hazard_Unit.
Optimizing module ID_buffer.
Optimizing module IF_buffer.
Optimizing module Imm_Gen.
Optimizing module MEM1_buffer.
Optimizing module MEM2_buffer.
Optimizing module Mem_adder.
Optimizing module Multiplexer32.
Optimizing module Multiplexer4.
Optimizing module Multiplexer8.
Optimizing module PC.
Optimizing module Register.
Optimizing module cpu.

20.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
<suppressed ~12 debug messages>
Finding identical cells in module `\BranchUnit'.
<suppressed ~3 debug messages>
Finding identical cells in module `\Control'.
<suppressed ~6 debug messages>
Finding identical cells in module `\EXE_buffer'.
Finding identical cells in module `\Forward_Unit'.
Finding identical cells in module `\Hazard_Unit'.
<suppressed ~12 debug messages>
Finding identical cells in module `\ID_buffer'.
Finding identical cells in module `\IF_buffer'.
Finding identical cells in module `\Imm_Gen'.
<suppressed ~144 debug messages>
Finding identical cells in module `\MEM1_buffer'.
Finding identical cells in module `\MEM2_buffer'.
Finding identical cells in module `\Mem_adder'.
<suppressed ~3 debug messages>
Finding identical cells in module `\Multiplexer32'.
Finding identical cells in module `\Multiplexer4'.
Finding identical cells in module `\Multiplexer8'.
Finding identical cells in module `\PC'.
Finding identical cells in module `\Register'.
<suppressed ~96 debug messages>
Finding identical cells in module `\cpu'.
Removed a total of 92 cells.

20.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \BranchUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $ternary$./codes/branch_unit.v:21$30: { \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm [11] \imm 1'0 } -> { 52'0000000000000000000000000000000000000000000000000000 \imm [10:0] 1'0 }
  Analyzing evaluation results.
Running muxtree optimizer on module \Control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \EXE_buffer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Forward_Unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Hazard_Unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$572.
    dead port 2/2 on $mux $procmux$578.
Running muxtree optimizer on module \ID_buffer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \IF_buffer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$539.
    dead port 1/2 on $mux $procmux$542.
    dead port 1/2 on $mux $procmux$545.
    dead port 1/2 on $mux $procmux$551.
    dead port 1/2 on $mux $procmux$554.
    dead port 1/2 on $mux $procmux$560.
Running muxtree optimizer on module \Imm_Gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \MEM1_buffer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \MEM2_buffer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Mem_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Multiplexer32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Multiplexer4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Multiplexer8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PC..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$404.
Running muxtree optimizer on module \Register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 9 multiplexer ports.
<suppressed ~56 debug messages>

20.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU.
    New ctrl vector for $pmux cell $procmux$640: { $procmux$647_CMP $procmux$646_CMP $procmux$644_CMP $auto$opt_reduce.cc:132:opt_mux$923 $auto$opt_reduce.cc:132:opt_mux$921 $auto$opt_reduce.cc:132:opt_mux$919 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$918: { $procmux$641_CMP $procmux$648_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$920: { $procmux$642_CMP $procmux$649_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$922: { $procmux$643_CMP $procmux$650_CMP }
  Optimizing cells in module \ALU.
  Optimizing cells in module \BranchUnit.
  Optimizing cells in module \Control.
    New ctrl vector for $pmux cell $procmux$636: $auto$opt_reduce.cc:132:opt_mux$925
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$924: { $procmux$626_CMP $procmux$627_CMP }
  Optimizing cells in module \Control.
  Optimizing cells in module \EXE_buffer.
  Optimizing cells in module \Forward_Unit.
  Optimizing cells in module \Hazard_Unit.
  Optimizing cells in module \ID_buffer.
  Optimizing cells in module \IF_buffer.
  Optimizing cells in module \Imm_Gen.
    New ctrl vector for $pmux cell $procmux$512: $procmux$508_CMP
    New ctrl vector for $pmux cell $procmux$518: { $procmux$509_CMP $procmux$508_CMP }
    New ctrl vector for $pmux cell $procmux$524: $procmux$508_CMP
    New ctrl vector for $pmux cell $procmux$506: { }
    New ctrl vector for $pmux cell $procmux$530: { $procmux$509_CMP $procmux$508_CMP }
  Optimizing cells in module \Imm_Gen.
  Optimizing cells in module \MEM1_buffer.
  Optimizing cells in module \MEM2_buffer.
  Optimizing cells in module \Mem_adder.
  Optimizing cells in module \Multiplexer32.
  Optimizing cells in module \Multiplexer4.
  Optimizing cells in module \Multiplexer8.
  Optimizing cells in module \PC.
  Optimizing cells in module \Register.
    Consolidated identical input bits for $mux cell $procmux$411:
      Old ports: A=64'0000000000000000000000000000000000000000000000000000000000000000, B=64'1111111111111111111111111111111111111111111111111111111111111111, Y=$procmux$411_Y
      New ports: A=1'0, B=1'1, Y=$procmux$411_Y [0]
      New connections: $procmux$411_Y [63:1] = { $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] $procmux$411_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$429:
      Old ports: A=64'1111111111111111111111111111111111111111111111111111111111111111, B=64'0000000000000000000000000000000000000000000000000000000000000000, Y=$procmux$429_Y
      New ports: A=1'1, B=1'0, Y=$procmux$429_Y [0]
      New connections: $procmux$429_Y [63:1] = { $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] $procmux$429_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$447:
      Old ports: A=64'1111111111111111111111111111111111111111111111111111111111111111, B=64'0000000000000000000000000000000000000000000000000000000000000000, Y=$procmux$447_Y
      New ports: A=1'1, B=1'0, Y=$procmux$447_Y [0]
      New connections: $procmux$447_Y [63:1] = { $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] $procmux$447_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$464:
      Old ports: A=64'0000000000000000000000000000000000000000000000000000000000000000, B=64'1111111111111111111111111111111111111111111111111111111111111111, Y=$procmux$464_Y
      New ports: A=1'0, B=1'1, Y=$procmux$464_Y [0]
      New connections: $procmux$464_Y [63:1] = { $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] $procmux$464_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$481:
      Old ports: A=64'0000000000000000000000000000000000000000000000000000000000000000, B=64'1111111111111111111111111111111111111111111111111111111111111111, Y=$procmux$481_Y
      New ports: A=1'0, B=1'1, Y=$procmux$481_Y [0]
      New connections: $procmux$481_Y [63:1] = { $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] $procmux$481_Y [0] }
  Optimizing cells in module \Register.
    Consolidated identical input bits for $mux cell $procmux$413:
      Old ports: A=64'0000000000000000000000000000000000000000000000000000000000000000, B=$procmux$411_Y, Y=$0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282
      New ports: A=1'0, B=$procmux$411_Y [0], Y=$0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0]
      New connections: $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [63:1] = { $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] $0$memwr$\x$./codes/register.v:40$210_EN[63:0]$282 [0] }
    Consolidated identical input bits for $mux cell $procmux$431:
      Old ports: A=64'0000000000000000000000000000000000000000000000000000000000000000, B=$procmux$429_Y, Y=$0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285
      New ports: A=1'0, B=$procmux$429_Y [0], Y=$0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0]
      New connections: $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [63:1] = { $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] $0$memwr$\x$./codes/register.v:43$211_EN[63:0]$285 [0] }
    Consolidated identical input bits for $mux cell $procmux$449:
      Old ports: A=64'0000000000000000000000000000000000000000000000000000000000000000, B=$procmux$447_Y, Y=$0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288
      New ports: A=1'0, B=$procmux$447_Y [0], Y=$0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0]
      New connections: $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [63:1] = { $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] $0$memwr$\x$./codes/register.v:44$212_EN[63:0]$288 [0] }
    Consolidated identical input bits for $mux cell $procmux$467:
      Old ports: A=$procmux$464_Y, B=64'0000000000000000000000000000000000000000000000000000000000000000, Y=$0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291
      New ports: A=$procmux$464_Y [0], B=1'0, Y=$0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0]
      New connections: $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [63:1] = { $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] $0$memwr$\x$./codes/register.v:48$213_EN[63:0]$291 [0] }
    Consolidated identical input bits for $mux cell $procmux$484:
      Old ports: A=$procmux$481_Y, B=64'0000000000000000000000000000000000000000000000000000000000000000, Y=$procmux$484_Y
      New ports: A=$procmux$481_Y [0], B=1'0, Y=$procmux$484_Y [0]
      New connections: $procmux$484_Y [63:1] = { $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] $procmux$484_Y [0] }
  Optimizing cells in module \Register.
    Consolidated identical input bits for $mux cell $procmux$487:
      Old ports: A=$procmux$484_Y, B=64'0000000000000000000000000000000000000000000000000000000000000000, Y=$0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294
      New ports: A=$procmux$484_Y [0], B=1'0, Y=$0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0]
      New connections: $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [63:1] = { $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] $0$memwr$\x$./codes/register.v:51$214_EN[63:0]$294 [0] }
  Optimizing cells in module \Register.
  Optimizing cells in module \cpu.
Performed a total of 22 changes.

20.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Finding identical cells in module `\BranchUnit'.
Finding identical cells in module `\Control'.
Finding identical cells in module `\EXE_buffer'.
Finding identical cells in module `\Forward_Unit'.
Finding identical cells in module `\Hazard_Unit'.
Finding identical cells in module `\ID_buffer'.
Finding identical cells in module `\IF_buffer'.
Finding identical cells in module `\Imm_Gen'.
Finding identical cells in module `\MEM1_buffer'.
Finding identical cells in module `\MEM2_buffer'.
Finding identical cells in module `\Mem_adder'.
Finding identical cells in module `\Multiplexer32'.
Finding identical cells in module `\Multiplexer4'.
Finding identical cells in module `\Multiplexer8'.
Finding identical cells in module `\PC'.
Finding identical cells in module `\Register'.
<suppressed ~9 debug messages>
Finding identical cells in module `\cpu'.
Removed a total of 3 cells.

20.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

20.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \BranchUnit..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \EXE_buffer..
Finding unused cells or wires in module \Forward_Unit..
Finding unused cells or wires in module \Hazard_Unit..
Finding unused cells or wires in module \ID_buffer..
Finding unused cells or wires in module \IF_buffer..
Finding unused cells or wires in module \Imm_Gen..
Finding unused cells or wires in module \MEM1_buffer..
Finding unused cells or wires in module \MEM2_buffer..
Finding unused cells or wires in module \Mem_adder..
Finding unused cells or wires in module \Multiplexer32..
Finding unused cells or wires in module \Multiplexer4..
Finding unused cells or wires in module \Multiplexer8..
Finding unused cells or wires in module \PC..
Finding unused cells or wires in module \Register..
Finding unused cells or wires in module \cpu..
Removed 0 unused cells and 103 unused wires.
<suppressed ~8 debug messages>

20.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
Optimizing module BranchUnit.
Optimizing module Control.
Optimizing module EXE_buffer.
Optimizing module Forward_Unit.
Optimizing module Hazard_Unit.
Optimizing module ID_buffer.
Optimizing module IF_buffer.
Optimizing module Imm_Gen.
Optimizing module MEM1_buffer.
Optimizing module MEM2_buffer.
Optimizing module Mem_adder.
Optimizing module Multiplexer32.
Optimizing module Multiplexer4.
Optimizing module Multiplexer8.
Optimizing module PC.
Optimizing module Register.
Optimizing module cpu.

20.6.9. Rerunning OPT passes. (Maybe there is more to do..)

20.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \BranchUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \EXE_buffer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Forward_Unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Hazard_Unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ID_buffer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \IF_buffer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Imm_Gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \MEM1_buffer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \MEM2_buffer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Mem_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Multiplexer32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Multiplexer4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Multiplexer8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PC..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~54 debug messages>

20.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU.
  Optimizing cells in module \BranchUnit.
  Optimizing cells in module \Control.
  Optimizing cells in module \EXE_buffer.
  Optimizing cells in module \Forward_Unit.
  Optimizing cells in module \Hazard_Unit.
  Optimizing cells in module \ID_buffer.
  Optimizing cells in module \IF_buffer.
  Optimizing cells in module \Imm_Gen.
  Optimizing cells in module \MEM1_buffer.
  Optimizing cells in module \MEM2_buffer.
  Optimizing cells in module \Mem_adder.
  Optimizing cells in module \Multiplexer32.
  Optimizing cells in module \Multiplexer4.
  Optimizing cells in module \Multiplexer8.
  Optimizing cells in module \PC.
  Optimizing cells in module \Register.
  Optimizing cells in module \cpu.
Performed a total of 0 changes.

20.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Finding identical cells in module `\BranchUnit'.
Finding identical cells in module `\Control'.
Finding identical cells in module `\EXE_buffer'.
Finding identical cells in module `\Forward_Unit'.
Finding identical cells in module `\Hazard_Unit'.
Finding identical cells in module `\ID_buffer'.
Finding identical cells in module `\IF_buffer'.
Finding identical cells in module `\Imm_Gen'.
Finding identical cells in module `\MEM1_buffer'.
Finding identical cells in module `\MEM2_buffer'.
Finding identical cells in module `\Mem_adder'.
Finding identical cells in module `\Multiplexer32'.
Finding identical cells in module `\Multiplexer4'.
Finding identical cells in module `\Multiplexer8'.
Finding identical cells in module `\PC'.
Finding identical cells in module `\Register'.
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

20.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

20.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \BranchUnit..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \EXE_buffer..
Finding unused cells or wires in module \Forward_Unit..
Finding unused cells or wires in module \Hazard_Unit..
Finding unused cells or wires in module \ID_buffer..
Finding unused cells or wires in module \IF_buffer..
Finding unused cells or wires in module \Imm_Gen..
Finding unused cells or wires in module \MEM1_buffer..
Finding unused cells or wires in module \MEM2_buffer..
Finding unused cells or wires in module \Mem_adder..
Finding unused cells or wires in module \Multiplexer32..
Finding unused cells or wires in module \Multiplexer4..
Finding unused cells or wires in module \Multiplexer8..
Finding unused cells or wires in module \PC..
Finding unused cells or wires in module \Register..
Finding unused cells or wires in module \cpu..

20.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
Optimizing module BranchUnit.
Optimizing module Control.
Optimizing module EXE_buffer.
Optimizing module Forward_Unit.
Optimizing module Hazard_Unit.
Optimizing module ID_buffer.
Optimizing module IF_buffer.
Optimizing module Imm_Gen.
Optimizing module MEM1_buffer.
Optimizing module MEM2_buffer.
Optimizing module Mem_adder.
Optimizing module Multiplexer32.
Optimizing module Multiplexer4.
Optimizing module Multiplexer8.
Optimizing module PC.
Optimizing module Register.
Optimizing module cpu.

20.6.16. Finished OPT passes. (There is nothing left to do.)

20.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 10) from port B of cell ALU.$procmux$646_CMP0 ($eq).
Removed top 1 bits (of 10) from port B of cell ALU.$procmux$647_CMP0 ($eq).
Removed top 1 bits (of 10) from port B of cell ALU.$procmux$648_CMP0 ($eq).
Removed top 1 bits (of 10) from port B of cell ALU.$procmux$649_CMP0 ($eq).
Removed top 1 bits (of 10) from port B of cell ALU.$procmux$650_CMP0 ($eq).
Removed top 1 bits (of 10) from port B of cell ALU.$procmux$651_CMP0 ($eq).
Removed top 52 bits (of 64) from port A of cell BranchUnit.$neg$./codes/branch_unit.v:21$27 ($neg).
Removed top 1 bits (of 64) from port Y of cell BranchUnit.$neg$./codes/branch_unit.v:21$27 ($neg).
Removed top 1 bits (of 64) from wire BranchUnit.$neg$./codes/branch_unit.v:21$27_Y.
Removed top 5 bits (of 7) from port B of cell Control.$procmux$619_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell Control.$procmux$626_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell Control.$procmux$627_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell Control.$procmux$633_CMP0 ($eq).
Removed top 1 bits (of 2) from mux cell Forward_Unit.$ternary$./codes/forward_unit.v:46$43 ($mux).
Removed top 1 bits (of 7) from port B of cell Forward_Unit.$eq$./codes/forward_unit.v:47$45 ($eq).
Removed top 1 bits (of 2) from mux cell Forward_Unit.$ternary$./codes/forward_unit.v:47$47 ($mux).
Removed top 1 bits (of 2) from wire Forward_Unit.$ternary$./codes/forward_unit.v:46$43_Y.
Removed top 1 bits (of 2) from wire Forward_Unit.$ternary$./codes/forward_unit.v:47$47_Y.
Removed top 31 bits (of 32) from port B of cell Hazard_Unit.$gt$./codes/hazard_unit.v:33$65 ($gt).
Removed top 30 bits (of 32) from port B of cell Hazard_Unit.$gt$./codes/hazard_unit.v:45$69 ($gt).
Removed top 30 bits (of 32) from port B of cell Hazard_Unit.$gt$./codes/hazard_unit.v:41$67 ($gt).
Removed top 30 bits (of 32) from port B of cell Hazard_Unit.$sub$./codes/hazard_unit.v:42$68 ($sub).
Removed top 30 bits (of 32) from port B of cell Hazard_Unit.$sub$./codes/hazard_unit.v:46$70 ($sub).
Removed top 30 bits (of 32) from port B of cell Hazard_Unit.$gt$./codes/hazard_unit.v:49$71 ($gt).
Removed top 30 bits (of 32) from port B of cell Hazard_Unit.$sub$./codes/hazard_unit.v:50$72 ($sub).
Removed top 31 bits (of 32) from port B of cell Hazard_Unit.$sub$./codes/hazard_unit.v:57$76 ($sub).
Removed top 30 bits (of 32) from port Y of cell Hazard_Unit.$sub$./codes/hazard_unit.v:57$76 ($sub).
Removed top 30 bits (of 32) from port B of cell Hazard_Unit.$eq$./codes/hazard_unit.v:55$74 ($eq).
Removed top 30 bits (of 32) from port B of cell Hazard_Unit.$eq$./codes/hazard_unit.v:60$77 ($eq).
Removed top 31 bits (of 32) from port B of cell Hazard_Unit.$sub$./codes/hazard_unit.v:62$79 ($sub).
Removed top 30 bits (of 32) from port Y of cell Hazard_Unit.$sub$./codes/hazard_unit.v:62$79 ($sub).
Removed top 30 bits (of 32) from port B of cell Hazard_Unit.$eq$./codes/hazard_unit.v:65$80 ($eq).
Removed top 31 bits (of 32) from port B of cell Hazard_Unit.$add$./codes/hazard_unit.v:72$83 ($add).
Removed top 30 bits (of 32) from port Y of cell Hazard_Unit.$add$./codes/hazard_unit.v:72$83 ($add).
Removed top 30 bits (of 32) from wire Hazard_Unit.$add$./codes/hazard_unit.v:72$83_Y.
Removed top 30 bits (of 32) from wire Hazard_Unit.$sub$./codes/hazard_unit.v:57$76_Y.
Removed top 30 bits (of 32) from wire Hazard_Unit.$sub$./codes/hazard_unit.v:62$79_Y.
Removed top 31 bits (of 32) from mux cell ID_buffer.$ternary$./codes/ID_buffer.v:53$94 ($mux).
Removed top 31 bits (of 32) from mux cell ID_buffer.$ternary$./codes/ID_buffer.v:52$92 ($mux).
Removed top 31 bits (of 32) from mux cell ID_buffer.$ternary$./codes/ID_buffer.v:54$96 ($mux).
Removed top 22 bits (of 32) from mux cell ID_buffer.$ternary$./codes/ID_buffer.v:55$98 ($mux).
Removed top 31 bits (of 32) from mux cell ID_buffer.$ternary$./codes/ID_buffer.v:56$100 ($mux).
Removed top 20 bits (of 32) from mux cell ID_buffer.$ternary$./codes/ID_buffer.v:59$106 ($mux).
Removed top 27 bits (of 32) from mux cell ID_buffer.$ternary$./codes/ID_buffer.v:60$108 ($mux).
Removed top 27 bits (of 32) from mux cell ID_buffer.$ternary$./codes/ID_buffer.v:61$110 ($mux).
Removed top 27 bits (of 32) from mux cell ID_buffer.$ternary$./codes/ID_buffer.v:62$112 ($mux).
Removed top 1 bits (of 2) from port B of cell IF_buffer.$eq$./codes/IF_buffer.v:36$117 ($eq).
Removed top 1 bits (of 7) from port B of cell Imm_Gen.$procmux$509_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell Imm_Gen.$procmux$507_CMP0 ($eq).
Removed top 5 bits (of 7) from port B of cell Imm_Gen.$procmux$510_CMP0 ($eq).
Removed top 29 bits (of 32) from port B of cell PC.$add$./codes/pc.v:27$141 ($add).
Removed top 27 bits (of 32) from port B of cell PC.$sub$./codes/pc.v:24$140 ($sub).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$297 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$298 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$299 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$300 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$301 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$302 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$303 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$304 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$305 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$306 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$307 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$308 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$309 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$310 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$311 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$312 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$313 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$314 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$315 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$316 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$317 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$318 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$319 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$320 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$321 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$322 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$323 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$324 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$325 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$326 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$327 (x).
Removed top 27 address bits (of 32) from memory init port Register.$meminit$\x$./codes/register.v:21$328 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:27$215 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:27$216 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:27$217 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:27$218 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:27$219 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:27$220 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:27$221 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:27$222 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:28$223 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:28$224 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:28$225 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:28$226 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:28$227 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:28$228 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:28$229 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:28$230 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:29$231 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:29$232 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:29$233 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:29$234 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:29$235 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:29$236 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:29$237 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:29$238 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:30$239 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:30$240 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:30$241 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:30$242 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:30$243 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:30$244 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:30$245 (x).
Removed top 27 address bits (of 32) from memory read port Register.$memrd$\x$./codes/register.v:30$246 (x).
Removed cell Register.$procmux$417 ($mux).
Removed cell Register.$procmux$425 ($mux).
Removed cell Register.$procmux$423 ($mux).
Removed cell Register.$procmux$419 ($mux).
Removed cell Register.$procmux$453 ($mux).
Removed cell Register.$procmux$443 ($mux).
Removed cell Register.$procmux$435 ($mux).
Removed cell Register.$procmux$441 ($mux).
Removed cell Register.$procmux$437 ($mux).
Removed cell Register.$procmux$455 ($mux).
Removed cell Register.$procmux$459 ($mux).
Removed cell Register.$procmux$461 ($mux).
Removed cell Register.$procmux$476 ($mux).
Removed cell Register.$procmux$470 ($mux).
Removed cell Register.$procmux$473 ($mux).
Removed cell Register.$procmux$479 ($mux).
Removed cell Register.$procmux$495 ($mux).
Removed cell Register.$procmux$489 ($mux).
Removed cell Register.$procmux$492 ($mux).
Removed cell Register.$procmux$503 ($mux).
Removed cell Register.$procmux$497 ($mux).
Removed cell Register.$procmux$500 ($mux).
Removed top 63 bits (of 64) from FF cell Register.$procdff$871 ($dff).
Removed top 63 bits (of 64) from FF cell Register.$procdff$874 ($dff).
Removed top 63 bits (of 64) from FF cell Register.$procdff$880 ($dff).
Removed top 63 bits (of 64) from FF cell Register.$procdff$883 ($dff).

20.8. Executing PEEPOPT pass (run peephole optimizers).

20.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \BranchUnit..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \EXE_buffer..
Finding unused cells or wires in module \Forward_Unit..
Finding unused cells or wires in module \Hazard_Unit..
Finding unused cells or wires in module \ID_buffer..
Finding unused cells or wires in module \IF_buffer..
Finding unused cells or wires in module \Imm_Gen..
Finding unused cells or wires in module \MEM1_buffer..
Finding unused cells or wires in module \MEM2_buffer..
Finding unused cells or wires in module \Mem_adder..
Finding unused cells or wires in module \Multiplexer32..
Finding unused cells or wires in module \Multiplexer4..
Finding unused cells or wires in module \Multiplexer8..
Finding unused cells or wires in module \PC..
Finding unused cells or wires in module \Register..
Finding unused cells or wires in module \cpu..
Removed 0 unused cells and 37 unused wires.
<suppressed ~5 debug messages>

20.10. Executing TECHMAP pass (map to technology primitives).

20.10.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

20.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~444 debug messages>

20.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module ALU:
  creating $macc model for $add$./codes/alu.v:16$2 ($add).
  creating $macc model for $sub$./codes/alu.v:23$9 ($sub).
  creating $alu model for $macc $sub$./codes/alu.v:23$9.
  creating $alu model for $macc $add$./codes/alu.v:16$2.
  creating $alu cell for $add$./codes/alu.v:16$2: $auto$alumacc.cc:474:replace_alu$932
  creating $alu cell for $sub$./codes/alu.v:23$9: $auto$alumacc.cc:474:replace_alu$935
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module BranchUnit:
  creating $macc model for $neg$./codes/branch_unit.v:21$27 ($neg).
  creating $macc model for $neg$./codes/branch_unit.v:21$29 ($neg).
  creating $alu model for $macc $neg$./codes/branch_unit.v:21$29.
  creating $macc cell for $neg$./codes/branch_unit.v:21$27: $auto$alumacc.cc:354:replace_macc$938
  creating $alu cell for $neg$./codes/branch_unit.v:21$29: $auto$alumacc.cc:474:replace_alu$939
  created 1 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module Control:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module EXE_buffer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module Forward_Unit:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module Hazard_Unit:
  creating $macc model for $add$./codes/hazard_unit.v:72$83 ($add).
  creating $macc model for $sub$./codes/hazard_unit.v:42$68 ($sub).
  creating $macc model for $sub$./codes/hazard_unit.v:46$70 ($sub).
  creating $macc model for $sub$./codes/hazard_unit.v:50$72 ($sub).
  creating $macc model for $sub$./codes/hazard_unit.v:57$76 ($sub).
  creating $macc model for $sub$./codes/hazard_unit.v:62$79 ($sub).
  creating $alu model for $macc $sub$./codes/hazard_unit.v:62$79.
  creating $alu model for $macc $sub$./codes/hazard_unit.v:57$76.
  creating $alu model for $macc $sub$./codes/hazard_unit.v:50$72.
  creating $alu model for $macc $sub$./codes/hazard_unit.v:46$70.
  creating $alu model for $macc $sub$./codes/hazard_unit.v:42$68.
  creating $alu model for $macc $add$./codes/hazard_unit.v:72$83.
  creating $alu model for $gt$./codes/hazard_unit.v:33$65 ($gt): new $alu
  creating $alu model for $gt$./codes/hazard_unit.v:41$67 ($gt): new $alu
  creating $alu model for $gt$./codes/hazard_unit.v:45$69 ($gt): new $alu
  creating $alu model for $gt$./codes/hazard_unit.v:49$71 ($gt): new $alu
  creating $alu model for $eq$./codes/hazard_unit.v:55$74 ($eq): merged with $gt$./codes/hazard_unit.v:41$67.
  creating $alu model for $eq$./codes/hazard_unit.v:60$77 ($eq): merged with $gt$./codes/hazard_unit.v:45$69.
  creating $alu model for $eq$./codes/hazard_unit.v:65$80 ($eq): merged with $gt$./codes/hazard_unit.v:49$71.
  creating $alu cell for $gt$./codes/hazard_unit.v:49$71, $eq$./codes/hazard_unit.v:65$80: $auto$alumacc.cc:474:replace_alu$946
  creating $alu cell for $gt$./codes/hazard_unit.v:45$69, $eq$./codes/hazard_unit.v:60$77: $auto$alumacc.cc:474:replace_alu$955
  creating $alu cell for $gt$./codes/hazard_unit.v:41$67, $eq$./codes/hazard_unit.v:55$74: $auto$alumacc.cc:474:replace_alu$964
  creating $alu cell for $gt$./codes/hazard_unit.v:33$65: $auto$alumacc.cc:474:replace_alu$973
  creating $alu cell for $add$./codes/hazard_unit.v:72$83: $auto$alumacc.cc:474:replace_alu$980
  creating $alu cell for $sub$./codes/hazard_unit.v:42$68: $auto$alumacc.cc:474:replace_alu$983
  creating $alu cell for $sub$./codes/hazard_unit.v:46$70: $auto$alumacc.cc:474:replace_alu$986
  creating $alu cell for $sub$./codes/hazard_unit.v:50$72: $auto$alumacc.cc:474:replace_alu$989
  creating $alu cell for $sub$./codes/hazard_unit.v:57$76: $auto$alumacc.cc:474:replace_alu$992
  creating $alu cell for $sub$./codes/hazard_unit.v:62$79: $auto$alumacc.cc:474:replace_alu$995
  created 10 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module ID_buffer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module IF_buffer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module Imm_Gen:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module MEM1_buffer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module MEM2_buffer:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module Mem_adder:
  creating $macc model for $add$./codes/Mem_address.v:18$122 ($add).
  creating $alu model for $macc $add$./codes/Mem_address.v:18$122.
  creating $alu cell for $add$./codes/Mem_address.v:18$122: $auto$alumacc.cc:474:replace_alu$998
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module Multiplexer32:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module Multiplexer4:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module Multiplexer8:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module PC:
  creating $macc model for $add$./codes/pc.v:24$139 ($add).
  creating $macc model for $add$./codes/pc.v:27$141 ($add).
  creating $macc model for $sub$./codes/pc.v:24$140 ($sub).
  merging $macc model for $add$./codes/pc.v:24$139 into $sub$./codes/pc.v:24$140.
  creating $alu model for $macc $add$./codes/pc.v:27$141.
  creating $macc cell for $sub$./codes/pc.v:24$140: $auto$alumacc.cc:354:replace_macc$1001
  creating $alu cell for $add$./codes/pc.v:27$141: $auto$alumacc.cc:474:replace_alu$1002
  created 1 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module Register:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cpu:
  created 0 $alu and 0 $macc cells.

20.12. Executing SHARE pass (SAT-based resource sharing).
Found 2 cells in module ALU that may be considered for resource sharing.
  Analyzing resource sharing options for $shr$./codes/alu.v:21$7 ($shr):
    Found 1 activation_patterns using ctrl signal $procmux$646_CMP.
    No candidates found.
  Analyzing resource sharing options for $shl$./codes/alu.v:20$6 ($shl):
    Found 1 activation_patterns using ctrl signal $procmux$647_CMP.
    No candidates found.

20.13. Executing OPT pass (performing simple optimizations).

20.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
Optimizing module BranchUnit.
Optimizing module Control.
Optimizing module EXE_buffer.
Optimizing module Forward_Unit.
Optimizing module Hazard_Unit.
Optimizing module ID_buffer.
Optimizing module IF_buffer.
Optimizing module Imm_Gen.
Optimizing module MEM1_buffer.
Optimizing module MEM2_buffer.
Optimizing module Mem_adder.
Optimizing module Multiplexer32.
Optimizing module Multiplexer4.
Optimizing module Multiplexer8.
Optimizing module PC.
Optimizing module Register.
Optimizing module cpu.

20.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Finding identical cells in module `\BranchUnit'.
Finding identical cells in module `\Control'.
Finding identical cells in module `\EXE_buffer'.
Finding identical cells in module `\Forward_Unit'.
Finding identical cells in module `\Hazard_Unit'.
Finding identical cells in module `\ID_buffer'.
Finding identical cells in module `\IF_buffer'.
Finding identical cells in module `\Imm_Gen'.
Finding identical cells in module `\MEM1_buffer'.
Finding identical cells in module `\MEM2_buffer'.
Finding identical cells in module `\Mem_adder'.
Finding identical cells in module `\Multiplexer32'.
Finding identical cells in module `\Multiplexer4'.
Finding identical cells in module `\Multiplexer8'.
Finding identical cells in module `\PC'.
Finding identical cells in module `\Register'.
<suppressed ~18 debug messages>
Finding identical cells in module `\cpu'.
Removed a total of 6 cells.

20.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \BranchUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \EXE_buffer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Forward_Unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Hazard_Unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ID_buffer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \IF_buffer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Imm_Gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \MEM1_buffer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \MEM2_buffer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Mem_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Multiplexer32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Multiplexer4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Multiplexer8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PC..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~44 debug messages>

20.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU.
  Optimizing cells in module \BranchUnit.
  Optimizing cells in module \Control.
  Optimizing cells in module \EXE_buffer.
  Optimizing cells in module \Forward_Unit.
  Optimizing cells in module \Hazard_Unit.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$953: { $auto$alumacc.cc:490:replace_alu$947 [0] $auto$alumacc.cc:490:replace_alu$947 [1] $auto$alumacc.cc:490:replace_alu$947 [2] $auto$alumacc.cc:490:replace_alu$947 [3] $auto$alumacc.cc:490:replace_alu$947 [4] $auto$alumacc.cc:490:replace_alu$947 [5] $auto$alumacc.cc:490:replace_alu$947 [6] $auto$alumacc.cc:490:replace_alu$947 [7] $auto$alumacc.cc:490:replace_alu$947 [8] $auto$alumacc.cc:490:replace_alu$947 [9] $auto$alumacc.cc:490:replace_alu$947 [10] $auto$alumacc.cc:490:replace_alu$947 [11] $auto$alumacc.cc:490:replace_alu$947 [12] $auto$alumacc.cc:490:replace_alu$947 [13] $auto$alumacc.cc:490:replace_alu$947 [14] $auto$alumacc.cc:490:replace_alu$947 [15] $auto$alumacc.cc:490:replace_alu$947 [16] $auto$alumacc.cc:490:replace_alu$947 [17] $auto$alumacc.cc:490:replace_alu$947 [18] $auto$alumacc.cc:490:replace_alu$947 [19] $auto$alumacc.cc:490:replace_alu$947 [20] $auto$alumacc.cc:490:replace_alu$947 [21] $auto$alumacc.cc:490:replace_alu$947 [22] $auto$alumacc.cc:490:replace_alu$947 [23] $auto$alumacc.cc:490:replace_alu$947 [24] $auto$alumacc.cc:490:replace_alu$947 [25] $auto$alumacc.cc:490:replace_alu$947 [26] $auto$alumacc.cc:490:replace_alu$947 [27] $auto$alumacc.cc:490:replace_alu$947 [28] $auto$alumacc.cc:490:replace_alu$947 [29] $auto$alumacc.cc:490:replace_alu$947 [30] $auto$alumacc.cc:490:replace_alu$947 [31] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$962: { $auto$alumacc.cc:490:replace_alu$956 [0] $auto$alumacc.cc:490:replace_alu$956 [1] $auto$alumacc.cc:490:replace_alu$956 [2] $auto$alumacc.cc:490:replace_alu$956 [3] $auto$alumacc.cc:490:replace_alu$956 [4] $auto$alumacc.cc:490:replace_alu$956 [5] $auto$alumacc.cc:490:replace_alu$956 [6] $auto$alumacc.cc:490:replace_alu$956 [7] $auto$alumacc.cc:490:replace_alu$956 [8] $auto$alumacc.cc:490:replace_alu$956 [9] $auto$alumacc.cc:490:replace_alu$956 [10] $auto$alumacc.cc:490:replace_alu$956 [11] $auto$alumacc.cc:490:replace_alu$956 [12] $auto$alumacc.cc:490:replace_alu$956 [13] $auto$alumacc.cc:490:replace_alu$956 [14] $auto$alumacc.cc:490:replace_alu$956 [15] $auto$alumacc.cc:490:replace_alu$956 [16] $auto$alumacc.cc:490:replace_alu$956 [17] $auto$alumacc.cc:490:replace_alu$956 [18] $auto$alumacc.cc:490:replace_alu$956 [19] $auto$alumacc.cc:490:replace_alu$956 [20] $auto$alumacc.cc:490:replace_alu$956 [21] $auto$alumacc.cc:490:replace_alu$956 [22] $auto$alumacc.cc:490:replace_alu$956 [23] $auto$alumacc.cc:490:replace_alu$956 [24] $auto$alumacc.cc:490:replace_alu$956 [25] $auto$alumacc.cc:490:replace_alu$956 [26] $auto$alumacc.cc:490:replace_alu$956 [27] $auto$alumacc.cc:490:replace_alu$956 [28] $auto$alumacc.cc:490:replace_alu$956 [29] $auto$alumacc.cc:490:replace_alu$956 [30] $auto$alumacc.cc:490:replace_alu$956 [31] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$971: { $auto$alumacc.cc:490:replace_alu$965 [0] $auto$alumacc.cc:490:replace_alu$965 [1] $auto$alumacc.cc:490:replace_alu$965 [2] $auto$alumacc.cc:490:replace_alu$965 [3] $auto$alumacc.cc:490:replace_alu$965 [4] $auto$alumacc.cc:490:replace_alu$965 [5] $auto$alumacc.cc:490:replace_alu$965 [6] $auto$alumacc.cc:490:replace_alu$965 [7] $auto$alumacc.cc:490:replace_alu$965 [8] $auto$alumacc.cc:490:replace_alu$965 [9] $auto$alumacc.cc:490:replace_alu$965 [10] $auto$alumacc.cc:490:replace_alu$965 [11] $auto$alumacc.cc:490:replace_alu$965 [12] $auto$alumacc.cc:490:replace_alu$965 [13] $auto$alumacc.cc:490:replace_alu$965 [14] $auto$alumacc.cc:490:replace_alu$965 [15] $auto$alumacc.cc:490:replace_alu$965 [16] $auto$alumacc.cc:490:replace_alu$965 [17] $auto$alumacc.cc:490:replace_alu$965 [18] $auto$alumacc.cc:490:replace_alu$965 [19] $auto$alumacc.cc:490:replace_alu$965 [20] $auto$alumacc.cc:490:replace_alu$965 [21] $auto$alumacc.cc:490:replace_alu$965 [22] $auto$alumacc.cc:490:replace_alu$965 [23] $auto$alumacc.cc:490:replace_alu$965 [24] $auto$alumacc.cc:490:replace_alu$965 [25] $auto$alumacc.cc:490:replace_alu$965 [26] $auto$alumacc.cc:490:replace_alu$965 [27] $auto$alumacc.cc:490:replace_alu$965 [28] $auto$alumacc.cc:490:replace_alu$965 [29] $auto$alumacc.cc:490:replace_alu$965 [30] $auto$alumacc.cc:490:replace_alu$965 [31] }
  Optimizing cells in module \Hazard_Unit.
  Optimizing cells in module \ID_buffer.
  Optimizing cells in module \IF_buffer.
  Optimizing cells in module \Imm_Gen.
  Optimizing cells in module \MEM1_buffer.
  Optimizing cells in module \MEM2_buffer.
  Optimizing cells in module \Mem_adder.
  Optimizing cells in module \Multiplexer32.
  Optimizing cells in module \Multiplexer4.
  Optimizing cells in module \Multiplexer8.
  Optimizing cells in module \PC.
  Optimizing cells in module \Register.
  Optimizing cells in module \cpu.
Performed a total of 3 changes.

20.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Finding identical cells in module `\BranchUnit'.
Finding identical cells in module `\Control'.
Finding identical cells in module `\EXE_buffer'.
Finding identical cells in module `\Forward_Unit'.
Finding identical cells in module `\Hazard_Unit'.
Finding identical cells in module `\ID_buffer'.
Finding identical cells in module `\IF_buffer'.
Finding identical cells in module `\Imm_Gen'.
Finding identical cells in module `\MEM1_buffer'.
Finding identical cells in module `\MEM2_buffer'.
Finding identical cells in module `\Mem_adder'.
Finding identical cells in module `\Multiplexer32'.
Finding identical cells in module `\Multiplexer4'.
Finding identical cells in module `\Multiplexer8'.
Finding identical cells in module `\PC'.
Finding identical cells in module `\Register'.
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

20.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

20.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \BranchUnit..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \EXE_buffer..
Finding unused cells or wires in module \Forward_Unit..
Finding unused cells or wires in module \Hazard_Unit..
Finding unused cells or wires in module \ID_buffer..
Finding unused cells or wires in module \IF_buffer..
Finding unused cells or wires in module \Imm_Gen..
Finding unused cells or wires in module \MEM1_buffer..
Finding unused cells or wires in module \MEM2_buffer..
Finding unused cells or wires in module \Mem_adder..
Finding unused cells or wires in module \Multiplexer32..
Finding unused cells or wires in module \Multiplexer4..
Finding unused cells or wires in module \Multiplexer8..
Finding unused cells or wires in module \PC..
Finding unused cells or wires in module \Register..
Finding unused cells or wires in module \cpu..
Removed 1 unused cells and 14 unused wires.
<suppressed ~4 debug messages>

20.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
Optimizing module BranchUnit.
Optimizing module Control.
Optimizing module EXE_buffer.
Optimizing module Forward_Unit.
Optimizing module Hazard_Unit.
Optimizing module ID_buffer.
Optimizing module IF_buffer.
Optimizing module Imm_Gen.
Optimizing module MEM1_buffer.
Optimizing module MEM2_buffer.
Optimizing module Mem_adder.
Optimizing module Multiplexer32.
Optimizing module Multiplexer4.
Optimizing module Multiplexer8.
Optimizing module PC.
Optimizing module Register.
Optimizing module cpu.

20.13.9. Rerunning OPT passes. (Maybe there is more to do..)

20.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \BranchUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \EXE_buffer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Forward_Unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Hazard_Unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ID_buffer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \IF_buffer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Imm_Gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \MEM1_buffer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \MEM2_buffer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Mem_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Multiplexer32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Multiplexer4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Multiplexer8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PC..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~44 debug messages>

20.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU.
  Optimizing cells in module \BranchUnit.
  Optimizing cells in module \Control.
  Optimizing cells in module \EXE_buffer.
  Optimizing cells in module \Forward_Unit.
  Optimizing cells in module \Hazard_Unit.
  Optimizing cells in module \ID_buffer.
  Optimizing cells in module \IF_buffer.
  Optimizing cells in module \Imm_Gen.
  Optimizing cells in module \MEM1_buffer.
  Optimizing cells in module \MEM2_buffer.
  Optimizing cells in module \Mem_adder.
  Optimizing cells in module \Multiplexer32.
  Optimizing cells in module \Multiplexer4.
  Optimizing cells in module \Multiplexer8.
  Optimizing cells in module \PC.
  Optimizing cells in module \Register.
  Optimizing cells in module \cpu.
Performed a total of 0 changes.

20.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Finding identical cells in module `\BranchUnit'.
Finding identical cells in module `\Control'.
Finding identical cells in module `\EXE_buffer'.
Finding identical cells in module `\Forward_Unit'.
Finding identical cells in module `\Hazard_Unit'.
Finding identical cells in module `\ID_buffer'.
Finding identical cells in module `\IF_buffer'.
Finding identical cells in module `\Imm_Gen'.
Finding identical cells in module `\MEM1_buffer'.
Finding identical cells in module `\MEM2_buffer'.
Finding identical cells in module `\Mem_adder'.
Finding identical cells in module `\Multiplexer32'.
Finding identical cells in module `\Multiplexer4'.
Finding identical cells in module `\Multiplexer8'.
Finding identical cells in module `\PC'.
Finding identical cells in module `\Register'.
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

20.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

20.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \BranchUnit..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \EXE_buffer..
Finding unused cells or wires in module \Forward_Unit..
Finding unused cells or wires in module \Hazard_Unit..
Finding unused cells or wires in module \ID_buffer..
Finding unused cells or wires in module \IF_buffer..
Finding unused cells or wires in module \Imm_Gen..
Finding unused cells or wires in module \MEM1_buffer..
Finding unused cells or wires in module \MEM2_buffer..
Finding unused cells or wires in module \Mem_adder..
Finding unused cells or wires in module \Multiplexer32..
Finding unused cells or wires in module \Multiplexer4..
Finding unused cells or wires in module \Multiplexer8..
Finding unused cells or wires in module \PC..
Finding unused cells or wires in module \Register..
Finding unused cells or wires in module \cpu..

20.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
Optimizing module BranchUnit.
Optimizing module Control.
Optimizing module EXE_buffer.
Optimizing module Forward_Unit.
Optimizing module Hazard_Unit.
Optimizing module ID_buffer.
Optimizing module IF_buffer.
Optimizing module Imm_Gen.
Optimizing module MEM1_buffer.
Optimizing module MEM2_buffer.
Optimizing module Mem_adder.
Optimizing module Multiplexer32.
Optimizing module Multiplexer4.
Optimizing module Multiplexer8.
Optimizing module PC.
Optimizing module Register.
Optimizing module cpu.

20.13.16. Finished OPT passes. (There is nothing left to do.)

20.14. Executing FSM pass (extract and optimize FSM).

20.14.1. Executing FSM_DETECT pass (finding FSMs in design).

20.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

20.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

20.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \BranchUnit..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \EXE_buffer..
Finding unused cells or wires in module \Forward_Unit..
Finding unused cells or wires in module \Hazard_Unit..
Finding unused cells or wires in module \ID_buffer..
Finding unused cells or wires in module \IF_buffer..
Finding unused cells or wires in module \Imm_Gen..
Finding unused cells or wires in module \MEM1_buffer..
Finding unused cells or wires in module \MEM2_buffer..
Finding unused cells or wires in module \Mem_adder..
Finding unused cells or wires in module \Multiplexer32..
Finding unused cells or wires in module \Multiplexer4..
Finding unused cells or wires in module \Multiplexer8..
Finding unused cells or wires in module \PC..
Finding unused cells or wires in module \Register..
Finding unused cells or wires in module \cpu..

20.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

20.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

20.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

20.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

20.15. Executing OPT pass (performing simple optimizations).

20.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
Optimizing module BranchUnit.
Optimizing module Control.
Optimizing module EXE_buffer.
Optimizing module Forward_Unit.
Optimizing module Hazard_Unit.
Optimizing module ID_buffer.
Optimizing module IF_buffer.
Optimizing module Imm_Gen.
Optimizing module MEM1_buffer.
Optimizing module MEM2_buffer.
Optimizing module Mem_adder.
Optimizing module Multiplexer32.
Optimizing module Multiplexer4.
Optimizing module Multiplexer8.
Optimizing module PC.
Optimizing module Register.
Optimizing module cpu.

20.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Finding identical cells in module `\BranchUnit'.
Finding identical cells in module `\Control'.
Finding identical cells in module `\EXE_buffer'.
Finding identical cells in module `\Forward_Unit'.
Finding identical cells in module `\Hazard_Unit'.
Finding identical cells in module `\ID_buffer'.
Finding identical cells in module `\IF_buffer'.
Finding identical cells in module `\Imm_Gen'.
Finding identical cells in module `\MEM1_buffer'.
Finding identical cells in module `\MEM2_buffer'.
Finding identical cells in module `\Mem_adder'.
Finding identical cells in module `\Multiplexer32'.
Finding identical cells in module `\Multiplexer4'.
Finding identical cells in module `\Multiplexer8'.
Finding identical cells in module `\PC'.
Finding identical cells in module `\Register'.
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

20.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

20.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \BranchUnit..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \EXE_buffer..
Finding unused cells or wires in module \Forward_Unit..
Finding unused cells or wires in module \Hazard_Unit..
Finding unused cells or wires in module \ID_buffer..
Finding unused cells or wires in module \IF_buffer..
Finding unused cells or wires in module \Imm_Gen..
Finding unused cells or wires in module \MEM1_buffer..
Finding unused cells or wires in module \MEM2_buffer..
Finding unused cells or wires in module \Mem_adder..
Finding unused cells or wires in module \Multiplexer32..
Finding unused cells or wires in module \Multiplexer4..
Finding unused cells or wires in module \Multiplexer8..
Finding unused cells or wires in module \PC..
Finding unused cells or wires in module \Register..
Finding unused cells or wires in module \cpu..

20.15.5. Finished fast OPT passes.

20.16. Executing MEMORY pass.

20.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$memwr$\x$./codes/register.v:40$329' in module `\Register': merged $dff to cell.
Checking cell `$memwr$\x$./codes/register.v:43$330' in module `\Register': merged $dff to cell.
Checking cell `$memwr$\x$./codes/register.v:44$331' in module `\Register': merged $dff to cell.
Checking cell `$memwr$\x$./codes/register.v:48$332' in module `\Register': merged $dff to cell.
Checking cell `$memwr$\x$./codes/register.v:51$333' in module `\Register': merged $dff to cell.
Checking cell `$memrd$\x$./codes/register.v:27$215' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:27$216' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:27$217' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:27$218' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:27$219' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:27$220' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:27$221' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:27$222' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:28$223' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:28$224' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:28$225' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:28$226' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:28$227' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:28$228' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:28$229' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:28$230' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:29$231' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:29$232' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:29$233' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:29$234' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:29$235' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:29$236' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:29$237' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:29$238' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:30$239' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:30$240' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:30$241' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:30$242' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:30$243' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:30$244' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:30$245' in module `\Register': no (compatible) $dff found.
Checking cell `$memrd$\x$./codes/register.v:30$246' in module `\Register': no (compatible) $dff found.

20.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \BranchUnit..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \EXE_buffer..
Finding unused cells or wires in module \Forward_Unit..
Finding unused cells or wires in module \Hazard_Unit..
Finding unused cells or wires in module \ID_buffer..
Finding unused cells or wires in module \IF_buffer..
Finding unused cells or wires in module \Imm_Gen..
Finding unused cells or wires in module \MEM1_buffer..
Finding unused cells or wires in module \MEM2_buffer..
Finding unused cells or wires in module \Mem_adder..
Finding unused cells or wires in module \Multiplexer32..
Finding unused cells or wires in module \Multiplexer4..
Finding unused cells or wires in module \Multiplexer8..
Finding unused cells or wires in module \PC..
Finding unused cells or wires in module \Register..
Finding unused cells or wires in module \cpu..
Removed 8 unused cells and 8 unused wires.
<suppressed ~9 debug messages>

20.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating write ports of memory Register.x by address:
  New clock domain: negedge \i_clk
    Port 0 ($memwr$\x$./codes/register.v:40$329) has addr \EXE_rd.
      Active bits: 1111111111111111111111111111111111111111111111111111111111111111
    Port 1 ($memwr$\x$./codes/register.v:43$330) has addr \EXE_rd.
      Active bits: 1111111111111111111111111111111111111111111111111111111111111111
      Merging port 0 into this one.
      Creating logic for merging DATA and EN ports.
      Active bits: 1111111111111111111111111111111111111111111111111111111111111111
    Port 2 ($memwr$\x$./codes/register.v:44$331) has addr \MEM_rd.
      Active bits: 1111111111111111111111111111111111111111111111111111111111111111
    Port 3 ($memwr$\x$./codes/register.v:48$332) has addr \EXE_rd.
      Active bits: 1111111111111111111111111111111111111111111111111111111111111111
      Merging port 1 into this one.
      Creating collosion-detect logic for port 2.
      Creating logic for merging DATA and EN ports.
      Active bits: 1111111111111111111111111111111111111111111111111111111111111111
    Port 4 ($memwr$\x$./codes/register.v:51$333) has addr \MEM_rd.
      Active bits: 1111111111111111111111111111111111111111111111111111111111111111
      Merging port 2 into this one.
      Creating collosion-detect logic for port 3.
      Creating logic for merging DATA and EN ports.
      Active bits: 1111111111111111111111111111111111111111111111111111111111111111
Consolidating write ports of memory Register.x using sat-based resource sharing:
  Port 0 ($memwr$\x$./codes/register.v:48$332) on negedge \i_clk: considered
  Port 1 ($memwr$\x$./codes/register.v:51$333) on negedge \i_clk: considered
  Common input cone for all EN signals: 22 cells.
  Size of unconstrained SAT problem: 149 variables, 366 clauses
  According to SAT solver sharing of port 0 with port 1 is not possible.

20.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \BranchUnit..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \EXE_buffer..
Finding unused cells or wires in module \Forward_Unit..
Finding unused cells or wires in module \Hazard_Unit..
Finding unused cells or wires in module \ID_buffer..
Finding unused cells or wires in module \IF_buffer..
Finding unused cells or wires in module \Imm_Gen..
Finding unused cells or wires in module \MEM1_buffer..
Finding unused cells or wires in module \MEM2_buffer..
Finding unused cells or wires in module \Mem_adder..
Finding unused cells or wires in module \Multiplexer32..
Finding unused cells or wires in module \Multiplexer4..
Finding unused cells or wires in module \Multiplexer8..
Finding unused cells or wires in module \PC..
Finding unused cells or wires in module \Register..
Finding unused cells or wires in module \cpu..

20.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\x' in module `\Register':
  $meminit$\x$./codes/register.v:21$297 ($meminit)
  $meminit$\x$./codes/register.v:21$298 ($meminit)
  $meminit$\x$./codes/register.v:21$299 ($meminit)
  $meminit$\x$./codes/register.v:21$300 ($meminit)
  $meminit$\x$./codes/register.v:21$301 ($meminit)
  $meminit$\x$./codes/register.v:21$302 ($meminit)
  $meminit$\x$./codes/register.v:21$303 ($meminit)
  $meminit$\x$./codes/register.v:21$304 ($meminit)
  $meminit$\x$./codes/register.v:21$305 ($meminit)
  $meminit$\x$./codes/register.v:21$306 ($meminit)
  $meminit$\x$./codes/register.v:21$307 ($meminit)
  $meminit$\x$./codes/register.v:21$308 ($meminit)
  $meminit$\x$./codes/register.v:21$309 ($meminit)
  $meminit$\x$./codes/register.v:21$310 ($meminit)
  $meminit$\x$./codes/register.v:21$311 ($meminit)
  $meminit$\x$./codes/register.v:21$312 ($meminit)
  $meminit$\x$./codes/register.v:21$313 ($meminit)
  $meminit$\x$./codes/register.v:21$314 ($meminit)
  $meminit$\x$./codes/register.v:21$315 ($meminit)
  $meminit$\x$./codes/register.v:21$316 ($meminit)
  $meminit$\x$./codes/register.v:21$317 ($meminit)
  $meminit$\x$./codes/register.v:21$318 ($meminit)
  $meminit$\x$./codes/register.v:21$319 ($meminit)
  $meminit$\x$./codes/register.v:21$320 ($meminit)
  $meminit$\x$./codes/register.v:21$321 ($meminit)
  $meminit$\x$./codes/register.v:21$322 ($meminit)
  $meminit$\x$./codes/register.v:21$323 ($meminit)
  $meminit$\x$./codes/register.v:21$324 ($meminit)
  $meminit$\x$./codes/register.v:21$325 ($meminit)
  $meminit$\x$./codes/register.v:21$326 ($meminit)
  $meminit$\x$./codes/register.v:21$327 ($meminit)
  $meminit$\x$./codes/register.v:21$328 ($meminit)
  $memwr$\x$./codes/register.v:48$332 ($memwr)
  $memwr$\x$./codes/register.v:51$333 ($memwr)
  $memrd$\x$./codes/register.v:27$215 ($memrd)
  $memrd$\x$./codes/register.v:27$216 ($memrd)
  $memrd$\x$./codes/register.v:27$217 ($memrd)
  $memrd$\x$./codes/register.v:27$218 ($memrd)
  $memrd$\x$./codes/register.v:27$219 ($memrd)
  $memrd$\x$./codes/register.v:27$220 ($memrd)
  $memrd$\x$./codes/register.v:27$221 ($memrd)
  $memrd$\x$./codes/register.v:27$222 ($memrd)
  $memrd$\x$./codes/register.v:28$223 ($memrd)
  $memrd$\x$./codes/register.v:28$224 ($memrd)
  $memrd$\x$./codes/register.v:28$225 ($memrd)
  $memrd$\x$./codes/register.v:28$226 ($memrd)
  $memrd$\x$./codes/register.v:28$227 ($memrd)
  $memrd$\x$./codes/register.v:28$228 ($memrd)
  $memrd$\x$./codes/register.v:28$229 ($memrd)
  $memrd$\x$./codes/register.v:28$230 ($memrd)
  $memrd$\x$./codes/register.v:29$231 ($memrd)
  $memrd$\x$./codes/register.v:29$232 ($memrd)
  $memrd$\x$./codes/register.v:29$233 ($memrd)
  $memrd$\x$./codes/register.v:29$234 ($memrd)
  $memrd$\x$./codes/register.v:29$235 ($memrd)
  $memrd$\x$./codes/register.v:29$236 ($memrd)
  $memrd$\x$./codes/register.v:29$237 ($memrd)
  $memrd$\x$./codes/register.v:29$238 ($memrd)
  $memrd$\x$./codes/register.v:30$239 ($memrd)
  $memrd$\x$./codes/register.v:30$240 ($memrd)
  $memrd$\x$./codes/register.v:30$241 ($memrd)
  $memrd$\x$./codes/register.v:30$242 ($memrd)
  $memrd$\x$./codes/register.v:30$243 ($memrd)
  $memrd$\x$./codes/register.v:30$244 ($memrd)
  $memrd$\x$./codes/register.v:30$245 ($memrd)
  $memrd$\x$./codes/register.v:30$246 ($memrd)

20.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \BranchUnit..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \EXE_buffer..
Finding unused cells or wires in module \Forward_Unit..
Finding unused cells or wires in module \Hazard_Unit..
Finding unused cells or wires in module \ID_buffer..
Finding unused cells or wires in module \IF_buffer..
Finding unused cells or wires in module \Imm_Gen..
Finding unused cells or wires in module \MEM1_buffer..
Finding unused cells or wires in module \MEM2_buffer..
Finding unused cells or wires in module \Mem_adder..
Finding unused cells or wires in module \Multiplexer32..
Finding unused cells or wires in module \Multiplexer4..
Finding unused cells or wires in module \Multiplexer8..
Finding unused cells or wires in module \PC..
Finding unused cells or wires in module \Register..
Finding unused cells or wires in module \cpu..

20.18. Executing OPT pass (performing simple optimizations).

20.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
Optimizing module BranchUnit.
Optimizing module Control.
<suppressed ~4 debug messages>
Optimizing module EXE_buffer.
Optimizing module Forward_Unit.
<suppressed ~2 debug messages>
Optimizing module Hazard_Unit.
Optimizing module ID_buffer.
Optimizing module IF_buffer.
Optimizing module Imm_Gen.
Optimizing module MEM1_buffer.
Optimizing module MEM2_buffer.
Optimizing module Mem_adder.
Optimizing module Multiplexer32.
Optimizing module Multiplexer4.
Optimizing module Multiplexer8.
Optimizing module PC.
Optimizing module Register.
<suppressed ~9 debug messages>
Optimizing module cpu.

20.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Finding identical cells in module `\BranchUnit'.
Finding identical cells in module `\Control'.
Finding identical cells in module `\EXE_buffer'.
Finding identical cells in module `\Forward_Unit'.
Finding identical cells in module `\Hazard_Unit'.
Finding identical cells in module `\ID_buffer'.
Finding identical cells in module `\IF_buffer'.
Finding identical cells in module `\Imm_Gen'.
Finding identical cells in module `\MEM1_buffer'.
Finding identical cells in module `\MEM2_buffer'.
Finding identical cells in module `\Mem_adder'.
Finding identical cells in module `\Multiplexer32'.
Finding identical cells in module `\Multiplexer4'.
Finding identical cells in module `\Multiplexer8'.
Finding identical cells in module `\PC'.
Finding identical cells in module `\Register'.
<suppressed ~12 debug messages>
Finding identical cells in module `\cpu'.
Removed a total of 4 cells.

20.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

20.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \BranchUnit..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \EXE_buffer..
Finding unused cells or wires in module \Forward_Unit..
Finding unused cells or wires in module \Hazard_Unit..
Finding unused cells or wires in module \ID_buffer..
Finding unused cells or wires in module \IF_buffer..
Finding unused cells or wires in module \Imm_Gen..
Finding unused cells or wires in module \MEM1_buffer..
Finding unused cells or wires in module \MEM2_buffer..
Finding unused cells or wires in module \Mem_adder..
Finding unused cells or wires in module \Multiplexer32..
Finding unused cells or wires in module \Multiplexer4..
Finding unused cells or wires in module \Multiplexer8..
Finding unused cells or wires in module \PC..
Finding unused cells or wires in module \Register..
Finding unused cells or wires in module \cpu..
Removed 0 unused cells and 14 unused wires.
<suppressed ~5 debug messages>

20.18.5. Finished fast OPT passes.

20.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \x in module \Register:
  created 32 $dff cells and 0 static cells of width 64.
  read interface: 0 $dff and 992 $mux cells.
  write interface: 64 write mux blocks.

20.20. Executing OPT pass (performing simple optimizations).

20.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
Optimizing module BranchUnit.
Optimizing module Control.
Optimizing module EXE_buffer.
Optimizing module Forward_Unit.
Optimizing module Hazard_Unit.
Optimizing module ID_buffer.
Optimizing module IF_buffer.
Optimizing module Imm_Gen.
Optimizing module MEM1_buffer.
Optimizing module MEM2_buffer.
Optimizing module Mem_adder.
Optimizing module Multiplexer32.
Optimizing module Multiplexer4.
Optimizing module Multiplexer8.
Optimizing module PC.
Optimizing module Register.
<suppressed ~1012 debug messages>
Optimizing module cpu.

20.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Finding identical cells in module `\BranchUnit'.
Finding identical cells in module `\Control'.
Finding identical cells in module `\EXE_buffer'.
Finding identical cells in module `\Forward_Unit'.
Finding identical cells in module `\Hazard_Unit'.
Finding identical cells in module `\ID_buffer'.
Finding identical cells in module `\IF_buffer'.
Finding identical cells in module `\Imm_Gen'.
Finding identical cells in module `\MEM1_buffer'.
Finding identical cells in module `\MEM2_buffer'.
Finding identical cells in module `\Mem_adder'.
Finding identical cells in module `\Multiplexer32'.
Finding identical cells in module `\Multiplexer4'.
Finding identical cells in module `\Multiplexer8'.
Finding identical cells in module `\PC'.
Finding identical cells in module `\Register'.
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

20.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \BranchUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \EXE_buffer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Forward_Unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Hazard_Unit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ID_buffer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \IF_buffer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Imm_Gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \MEM1_buffer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \MEM2_buffer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Mem_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Multiplexer32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Multiplexer4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Multiplexer8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \PC..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~72 debug messages>

20.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU.
  Optimizing cells in module \BranchUnit.
  Optimizing cells in module \Control.
  Optimizing cells in module \EXE_buffer.
  Optimizing cells in module \Forward_Unit.
  Optimizing cells in module \Hazard_Unit.
  Optimizing cells in module \ID_buffer.
  Optimizing cells in module \IF_buffer.
  Optimizing cells in module \Imm_Gen.
  Optimizing cells in module \MEM1_buffer.
  Optimizing cells in module \MEM2_buffer.
  Optimizing cells in module \Mem_adder.
  Optimizing cells in module \Multiplexer32.
  Optimizing cells in module \Multiplexer4.
  Optimizing cells in module \Multiplexer8.
  Optimizing cells in module \PC.
  Optimizing cells in module \Register.
  Optimizing cells in module \cpu.
Performed a total of 0 changes.

20.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Finding identical cells in module `\BranchUnit'.
Finding identical cells in module `\Control'.
Finding identical cells in module `\EXE_buffer'.
Finding identical cells in module `\Forward_Unit'.
Finding identical cells in module `\Hazard_Unit'.
Finding identical cells in module `\ID_buffer'.
Finding identical cells in module `\IF_buffer'.
Finding identical cells in module `\Imm_Gen'.
Finding identical cells in module `\MEM1_buffer'.
Finding identical cells in module `\MEM2_buffer'.
Finding identical cells in module `\Mem_adder'.
Finding identical cells in module `\Multiplexer32'.
Finding identical cells in module `\Multiplexer4'.
Finding identical cells in module `\Multiplexer8'.
Finding identical cells in module `\PC'.
Finding identical cells in module `\Register'.
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

20.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

20.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \BranchUnit..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \EXE_buffer..
Finding unused cells or wires in module \Forward_Unit..
Finding unused cells or wires in module \Hazard_Unit..
Finding unused cells or wires in module \ID_buffer..
Finding unused cells or wires in module \IF_buffer..
Finding unused cells or wires in module \Imm_Gen..
Finding unused cells or wires in module \MEM1_buffer..
Finding unused cells or wires in module \MEM2_buffer..
Finding unused cells or wires in module \Mem_adder..
Finding unused cells or wires in module \Multiplexer32..
Finding unused cells or wires in module \Multiplexer4..
Finding unused cells or wires in module \Multiplexer8..
Finding unused cells or wires in module \PC..
Finding unused cells or wires in module \Register..
Finding unused cells or wires in module \cpu..
Removed 0 unused cells and 2058 unused wires.
<suppressed ~1 debug messages>

20.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
Optimizing module BranchUnit.
Optimizing module Control.
Optimizing module EXE_buffer.
Optimizing module Forward_Unit.
Optimizing module Hazard_Unit.
Optimizing module ID_buffer.
Optimizing module IF_buffer.
Optimizing module Imm_Gen.
Optimizing module MEM1_buffer.
Optimizing module MEM2_buffer.
Optimizing module Mem_adder.
Optimizing module Multiplexer32.
Optimizing module Multiplexer4.
Optimizing module Multiplexer8.
Optimizing module PC.
Optimizing module Register.
Optimizing module cpu.

20.20.9. Finished OPT passes. (There is nothing left to do.)

20.21. Executing TECHMAP pass (map to technology primitives).

20.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

20.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using template $paramod$constmap:e00aa0a058e67d372193cba695b7d8f6ecbb6790$paramod$b20346e7b3eb90158ed44f62b5749eaf92da5c63\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:e00aa0a058e67d372193cba695b7d8f6ecbb6790$paramod$efe953e6dc080c2860f1b45c2d8a45c46ff5a642\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=64\B_WIDTH=64\Y_WIDTH=64 for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_pmux\WIDTH=64\S_WIDTH=6 for cells of type $pmux.
Using extmapper simplemap for cells of type $dlatch.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_lcu\WIDTH=64 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=64\Y_WIDTH=64 for cells of type $alu.
Using extmapper maccmap for cells of type $macc.
  sub \imm (12 bits, signed)
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=63\B_WIDTH=63\Y_WIDTH=63 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=63 for cells of type $lcu.
Using template $paramod\_90_pmux\WIDTH=10\S_WIDTH=2 for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
  add \o_i_addr_r (64 bits, unsigned)
  add \br_addr (64 bits, unsigned)
  add 64'1111111111111111111111111111111111111111111111111111111111110000 (64 bits, unsigned)
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=64\Y_WIDTH=64 for cells of type $alu.
Using extmapper simplemap for cells of type $adff.
Using template $paramod\_90_fa\WIDTH=64 for cells of type $fa.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=2 for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=2\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=32\B_WIDTH=2\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=1\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=1\Y_WIDTH=2 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=2\Y_WIDTH=2 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=2 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=12\B_WIDTH=64\Y_WIDTH=64 for cells of type $alu.
No more expansions possible.
<suppressed ~6461 debug messages>

20.22. Executing OPT pass (performing simple optimizations).

20.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
<suppressed ~228 debug messages>
Optimizing module BranchUnit.
<suppressed ~800 debug messages>
Optimizing module Control.
<suppressed ~30 debug messages>
Optimizing module EXE_buffer.
Optimizing module Forward_Unit.
<suppressed ~10 debug messages>
Optimizing module Hazard_Unit.
<suppressed ~1119 debug messages>
Optimizing module ID_buffer.
Optimizing module IF_buffer.
<suppressed ~98 debug messages>
Optimizing module Imm_Gen.
<suppressed ~26 debug messages>
Optimizing module MEM1_buffer.
Optimizing module MEM2_buffer.
Optimizing module Mem_adder.
<suppressed ~322 debug messages>
Optimizing module Multiplexer32.
Optimizing module Multiplexer4.
Optimizing module Multiplexer8.
Optimizing module PC.
<suppressed ~522 debug messages>
Optimizing module Register.
<suppressed ~3 debug messages>
Optimizing module cpu.

20.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
<suppressed ~1194 debug messages>
Finding identical cells in module `\BranchUnit'.
<suppressed ~654 debug messages>
Finding identical cells in module `\Control'.
<suppressed ~72 debug messages>
Finding identical cells in module `\EXE_buffer'.
Finding identical cells in module `\Forward_Unit'.
Finding identical cells in module `\Hazard_Unit'.
<suppressed ~795 debug messages>
Finding identical cells in module `\ID_buffer'.
Finding identical cells in module `\IF_buffer'.
Finding identical cells in module `\Imm_Gen'.
<suppressed ~54 debug messages>
Finding identical cells in module `\MEM1_buffer'.
Finding identical cells in module `\MEM2_buffer'.
Finding identical cells in module `\Mem_adder'.
Finding identical cells in module `\Multiplexer32'.
Finding identical cells in module `\Multiplexer4'.
Finding identical cells in module `\Multiplexer8'.
Finding identical cells in module `\PC'.
Finding identical cells in module `\Register'.
<suppressed ~30 debug messages>
Finding identical cells in module `\cpu'.
Removed a total of 933 cells.

20.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

20.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \BranchUnit..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \EXE_buffer..
Finding unused cells or wires in module \Forward_Unit..
Finding unused cells or wires in module \Hazard_Unit..
Finding unused cells or wires in module \ID_buffer..
Finding unused cells or wires in module \IF_buffer..
Finding unused cells or wires in module \Imm_Gen..
Finding unused cells or wires in module \MEM1_buffer..
Finding unused cells or wires in module \MEM2_buffer..
Finding unused cells or wires in module \Mem_adder..
Finding unused cells or wires in module \Multiplexer32..
Finding unused cells or wires in module \Multiplexer4..
Finding unused cells or wires in module \Multiplexer8..
Finding unused cells or wires in module \PC..
Finding unused cells or wires in module \Register..
Finding unused cells or wires in module \cpu..
Removed 535 unused cells and 2124 unused wires.
<suppressed ~545 debug messages>

20.22.5. Finished fast OPT passes.

20.23. Executing ABC pass (technology mapping using ABC).

20.23.1. Extracting gate netlist of module `\ALU' to `<abc-temp-dir>/input.blif'..
Extracted 2923 gates and 3063 wires to a netlist network with 138 inputs and 65 outputs.

20.23.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

20.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       42
ABC RESULTS:            ANDNOT cells:      154
ABC RESULTS:              AOI3 cells:       68
ABC RESULTS:               MUX cells:      706
ABC RESULTS:              NAND cells:       57
ABC RESULTS:               NOR cells:      117
ABC RESULTS:               NOT cells:      113
ABC RESULTS:              OAI3 cells:      110
ABC RESULTS:              OAI4 cells:      192
ABC RESULTS:                OR cells:      546
ABC RESULTS:             ORNOT cells:      113
ABC RESULTS:              XNOR cells:      106
ABC RESULTS:               XOR cells:       84
ABC RESULTS:        internal signals:     2860
ABC RESULTS:           input signals:      138
ABC RESULTS:          output signals:       65
Removing temp directory.

20.23.2. Extracting gate netlist of module `\BranchUnit' to `<abc-temp-dir>/input.blif'..
Extracted 595 gates and 745 wires to a netlist network with 148 inputs and 64 outputs.

20.23.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

20.23.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:       42
ABC RESULTS:              AOI3 cells:       41
ABC RESULTS:               MUX cells:       11
ABC RESULTS:              NAND cells:        7
ABC RESULTS:               NOR cells:        8
ABC RESULTS:               NOT cells:        4
ABC RESULTS:              OAI4 cells:        6
ABC RESULTS:                OR cells:       81
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:              XNOR cells:       12
ABC RESULTS:               XOR cells:       80
ABC RESULTS:        internal signals:      533
ABC RESULTS:           input signals:      148
ABC RESULTS:          output signals:       64
Removing temp directory.

20.23.3. Extracting gate netlist of module `\Control' to `<abc-temp-dir>/input.blif'..
Extracted 58 gates and 76 wires to a netlist network with 16 inputs and 14 outputs.

20.23.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

20.23.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:       11
ABC RESULTS:              AOI3 cells:        3
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               NOT cells:        4
ABC RESULTS:              OAI3 cells:        1
ABC RESULTS:                OR cells:        6
ABC RESULTS:             ORNOT cells:       10
ABC RESULTS:        internal signals:       46
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:       14
Removing temp directory.

20.23.4. Extracting gate netlist of module `\EXE_buffer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

20.23.5. Extracting gate netlist of module `\Forward_Unit' to `<abc-temp-dir>/input.blif'..
Extracted 59 gates and 90 wires to a netlist network with 29 inputs and 4 outputs.

20.23.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

20.23.5.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        8
ABC RESULTS:              AOI4 cells:        1
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               NOR cells:        2
ABC RESULTS:              OAI3 cells:        1
ABC RESULTS:                OR cells:       13
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               XOR cells:       18
ABC RESULTS:        internal signals:       57
ABC RESULTS:           input signals:       29
ABC RESULTS:          output signals:        4
Removing temp directory.

20.23.6. Extracting gate netlist of module `\Hazard_Unit' to `<abc-temp-dir>/input.blif'..
Extracted 1373 gates and 1625 wires to a netlist network with 250 inputs and 294 outputs.

20.23.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

20.23.6.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:      124
ABC RESULTS:              AOI3 cells:       82
ABC RESULTS:              AOI4 cells:        1
ABC RESULTS:               MUX cells:      190
ABC RESULTS:              NAND cells:       18
ABC RESULTS:               NOR cells:       49
ABC RESULTS:               NOT cells:       90
ABC RESULTS:              OAI3 cells:       29
ABC RESULTS:                OR cells:      143
ABC RESULTS:             ORNOT cells:       21
ABC RESULTS:              XNOR cells:       11
ABC RESULTS:               XOR cells:      172
ABC RESULTS:        internal signals:     1081
ABC RESULTS:           input signals:      250
ABC RESULTS:          output signals:      294
Removing temp directory.

20.23.7. Extracting gate netlist of module `\ID_buffer' to `<abc-temp-dir>/input.blif'..
Extracted 169 gates and 340 wires to a netlist network with 170 inputs and 169 outputs.

20.23.7.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

20.23.7.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:      169
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:      170
ABC RESULTS:          output signals:      169
Removing temp directory.

20.23.8. Extracting gate netlist of module `\IF_buffer' to `<abc-temp-dir>/input.blif'..
Extracted 133 gates and 266 wires to a netlist network with 131 inputs and 32 outputs.

20.23.8.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

20.23.8.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:       34
ABC RESULTS:               MUX cells:       96
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:      129
ABC RESULTS:        internal signals:      103
ABC RESULTS:           input signals:      131
ABC RESULTS:          output signals:       32
Removing temp directory.

20.23.9. Extracting gate netlist of module `\Imm_Gen' to `<abc-temp-dir>/input.blif'..
Extracted 52 gates and 76 wires to a netlist network with 23 inputs and 12 outputs.

20.23.9.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

20.23.9.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:              AOI3 cells:        1
ABC RESULTS:               MUX cells:       11
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOT cells:        6
ABC RESULTS:              OAI3 cells:        1
ABC RESULTS:              OAI4 cells:        5
ABC RESULTS:                OR cells:        8
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:        internal signals:       41
ABC RESULTS:           input signals:       23
ABC RESULTS:          output signals:       12
Removing temp directory.

20.23.10. Extracting gate netlist of module `\MEM1_buffer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

20.23.11. Extracting gate netlist of module `\MEM2_buffer' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

20.23.12. Extracting gate netlist of module `\Mem_adder' to `<abc-temp-dir>/input.blif'..
Extracted 228 gates and 304 wires to a netlist network with 76 inputs and 64 outputs.

20.23.12.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

20.23.12.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        8
ABC RESULTS:            ANDNOT cells:       29
ABC RESULTS:              AOI3 cells:        7
ABC RESULTS:              AOI4 cells:        1
ABC RESULTS:              NAND cells:       34
ABC RESULTS:               NOR cells:        6
ABC RESULTS:               NOT cells:        5
ABC RESULTS:              OAI3 cells:        9
ABC RESULTS:                OR cells:       36
ABC RESULTS:             ORNOT cells:        5
ABC RESULTS:              XNOR cells:       34
ABC RESULTS:               XOR cells:       41
ABC RESULTS:        internal signals:      164
ABC RESULTS:           input signals:       76
ABC RESULTS:          output signals:       64
Removing temp directory.

20.23.13. Extracting gate netlist of module `\Multiplexer32' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

20.23.14. Extracting gate netlist of module `\Multiplexer4' to `<abc-temp-dir>/input.blif'..
Extracted 192 gates and 450 wires to a netlist network with 258 inputs and 64 outputs.

20.23.14.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

20.23.14.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:      192
ABC RESULTS:               NOT cells:        1
ABC RESULTS:        internal signals:      128
ABC RESULTS:           input signals:      258
ABC RESULTS:          output signals:       64
Removing temp directory.

20.23.15. Extracting gate netlist of module `\Multiplexer8' to `<abc-temp-dir>/input.blif'..
Extracted 64 gates and 193 wires to a netlist network with 129 inputs and 64 outputs.

20.23.15.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

20.23.15.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:       64
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:      129
ABC RESULTS:          output signals:       64
Removing temp directory.

20.23.16. Extracting gate netlist of module `\PC' to `<abc-temp-dir>/input.blif'..
Extracted 1012 gates and 1143 wires to a netlist network with 130 inputs and 64 outputs.

20.23.16.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

20.23.16.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       24
ABC RESULTS:            ANDNOT cells:       68
ABC RESULTS:              AOI3 cells:       45
ABC RESULTS:               MUX cells:      128
ABC RESULTS:              NAND cells:       43
ABC RESULTS:               NOR cells:       82
ABC RESULTS:               NOT cells:       40
ABC RESULTS:              OAI3 cells:       52
ABC RESULTS:                OR cells:       83
ABC RESULTS:             ORNOT cells:       23
ABC RESULTS:              XNOR cells:       74
ABC RESULTS:               XOR cells:      179
ABC RESULTS:        internal signals:      949
ABC RESULTS:           input signals:      130
ABC RESULTS:          output signals:       64
Removing temp directory.

20.23.17. Extracting gate netlist of module `\Register' to `<abc-temp-dir>/input.blif'..
Extracted 6211 gates and 8401 wires to a netlist network with 2188 inputs and 2048 outputs.

20.23.17.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

20.23.17.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:      101
ABC RESULTS:              AOI3 cells:       64
ABC RESULTS:               MUX cells:     4160
ABC RESULTS:              NAND cells:        6
ABC RESULTS:               NOR cells:        3
ABC RESULTS:               NOT cells:       67
ABC RESULTS:              OAI3 cells:       64
ABC RESULTS:                OR cells:      117
ABC RESULTS:             ORNOT cells:        9
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:        4
ABC RESULTS:        internal signals:     4165
ABC RESULTS:           input signals:     2188
ABC RESULTS:          output signals:     2048
Removing temp directory.

20.23.18. Extracting gate netlist of module `\cpu' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

20.24. Executing OPT pass (performing simple optimizations).

20.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU.
<suppressed ~321 debug messages>
Optimizing module BranchUnit.
<suppressed ~10 debug messages>
Optimizing module Control.
Optimizing module EXE_buffer.
Optimizing module Forward_Unit.
Optimizing module Hazard_Unit.
<suppressed ~22 debug messages>
Optimizing module ID_buffer.
Optimizing module IF_buffer.
Optimizing module Imm_Gen.
Optimizing module MEM1_buffer.
Optimizing module MEM2_buffer.
Optimizing module Mem_adder.
Optimizing module Multiplexer32.
Optimizing module Multiplexer4.
<suppressed ~64 debug messages>
Optimizing module Multiplexer8.
Optimizing module PC.
<suppressed ~64 debug messages>
Optimizing module Register.
Optimizing module cpu.

20.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU'.
Finding identical cells in module `\BranchUnit'.
<suppressed ~135 debug messages>
Finding identical cells in module `\Control'.
Finding identical cells in module `\EXE_buffer'.
Finding identical cells in module `\Forward_Unit'.
Finding identical cells in module `\Hazard_Unit'.
<suppressed ~57 debug messages>
Finding identical cells in module `\ID_buffer'.
Finding identical cells in module `\IF_buffer'.
Finding identical cells in module `\Imm_Gen'.
Finding identical cells in module `\MEM1_buffer'.
Finding identical cells in module `\MEM2_buffer'.
Finding identical cells in module `\Mem_adder'.
Finding identical cells in module `\Multiplexer32'.
Finding identical cells in module `\Multiplexer4'.
Finding identical cells in module `\Multiplexer8'.
Finding identical cells in module `\PC'.
Finding identical cells in module `\Register'.
Finding identical cells in module `\cpu'.
Removed a total of 64 cells.

20.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

20.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU..
Finding unused cells or wires in module \BranchUnit..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \EXE_buffer..
Finding unused cells or wires in module \Forward_Unit..
Finding unused cells or wires in module \Hazard_Unit..
Finding unused cells or wires in module \ID_buffer..
Finding unused cells or wires in module \IF_buffer..
Finding unused cells or wires in module \Imm_Gen..
Finding unused cells or wires in module \MEM1_buffer..
Finding unused cells or wires in module \MEM2_buffer..
Finding unused cells or wires in module \Mem_adder..
Finding unused cells or wires in module \Multiplexer32..
Finding unused cells or wires in module \Multiplexer4..
Finding unused cells or wires in module \Multiplexer8..
Finding unused cells or wires in module \PC..
Finding unused cells or wires in module \Register..
Finding unused cells or wires in module \cpu..
Removed 9 unused cells and 6480 unused wires.
<suppressed ~34 debug messages>

20.24.5. Finished fast OPT passes.

20.25. Executing HIERARCHY pass (managing design hierarchy).

20.25.1. Analyzing design hierarchy..
Top module:  \cpu
Used module:     \ALU
Used module:     \Multiplexer4
Used module:     \BranchUnit
Used module:     \Control
Used module:     \Mem_adder
Used module:     \EXE_buffer
Used module:     \Forward_Unit
Used module:     \Hazard_Unit
Used module:     \ID_buffer
Used module:     \IF_buffer
Used module:     \Imm_Gen
Used module:     \MEM1_buffer
Used module:     \MEM2_buffer
Used module:     \PC
Used module:     \Register
Used module:         \Multiplexer32
Used module:             \Multiplexer8

20.25.2. Analyzing design hierarchy..
Top module:  \cpu
Used module:     \ALU
Used module:     \Multiplexer4
Used module:     \BranchUnit
Used module:     \Control
Used module:     \Mem_adder
Used module:     \EXE_buffer
Used module:     \Forward_Unit
Used module:     \Hazard_Unit
Used module:     \ID_buffer
Used module:     \IF_buffer
Used module:     \Imm_Gen
Used module:     \MEM1_buffer
Used module:     \MEM2_buffer
Used module:     \PC
Used module:     \Register
Used module:         \Multiplexer32
Used module:             \Multiplexer8
Removed 0 unused modules.

20.26. Printing statistics.

=== ALU ===

   Number of wires:               2344
   Number of wire bits:           2668
   Number of public wires:           5
   Number of public wire bits:     266
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2466
     $_ANDNOT_                     154
     $_AND_                         42
     $_AOI3_                        68
     $_DLATCH_P_                    64
     $_MUX_                        706
     $_NAND_                        57
     $_NOR_                        117
     $_NOT_                        107
     $_OAI3_                       110
     $_OAI4_                       192
     $_ORNOT_                      113
     $_OR_                         546
     $_XNOR_                       106
     $_XOR_                         84

=== BranchUnit ===

   Number of wires:                235
   Number of wire bits:            477
   Number of public wires:           7
   Number of public wire bits:     249
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                253
     $_ANDNOT_                      39
     $_AND_                          2
     $_AOI3_                         3
     $_MUX_                         11
     $_NAND_                         7
     $_NOR_                          7
     $_NOT_                          4
     $_OAI4_                         3
     $_ORNOT_                        4
     $_OR_                          81
     $_XNOR_                        12
     $_XOR_                         80

=== Control ===

   Number of wires:                 39
   Number of wire bits:            102
   Number of public wires:          14
   Number of public wire bits:      77
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 39
     $_ANDNOT_                      11
     $_AND_                          1
     $_AOI3_                         3
     $_NAND_                         3
     $_NOT_                          4
     $_OAI3_                         1
     $_ORNOT_                       10
     $_OR_                           6

=== EXE_buffer ===

   Number of wires:                 17
   Number of wire bits:            285
   Number of public wires:          17
   Number of public wire bits:     285
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 71
     $_DFF_P_                       71

=== Forward_Unit ===

   Number of wires:                 59
   Number of wire bits:            338
   Number of public wires:          13
   Number of public wire bits:     292
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 50
     $_ANDNOT_                       8
     $_AND_                          1
     $_AOI4_                         1
     $_NAND_                         3
     $_NOR_                          2
     $_OAI3_                         1
     $_ORNOT_                        1
     $_OR_                          13
     $_XNOR_                         2
     $_XOR_                         18

=== Hazard_Unit ===

   Number of wires:                645
   Number of wire bits:           1190
   Number of public wires:          16
   Number of public wire bits:     280
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1204
     $_ANDNOT_                     124
     $_AND_                          2
     $_AOI3_                        82
     $_AOI4_                         1
     $_DFF_N_                      196
     $_DFF_P_                       96
     $_MUX_                        190
     $_NAND_                        18
     $_NOR_                         48
     $_NOT_                         88
     $_OAI3_                        29
     $_ORNOT_                       21
     $_OR_                         127
     $_XNOR_                        11
     $_XOR_                        171

=== ID_buffer ===

   Number of wires:                 46
   Number of wire bits:            678
   Number of public wires:          46
   Number of public wire bits:     678
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                338
     $_ANDNOT_                     169
     $_DFF_P_                      169

=== IF_buffer ===

   Number of wires:                240
   Number of wire bits:            460
   Number of public wires:          11
   Number of public wire bits:     200
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                388
     $_ANDNOT_                      34
     $_DFF_N_                       96
     $_DFF_P_                       32
     $_MUX_                         96
     $_NOR_                          1
     $_NOT_                        129

=== Imm_Gen ===

   Number of wires:                 31
   Number of wire bits:             95
   Number of public wires:           3
   Number of public wire bits:      56
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 50
     $_ANDNOT_                       1
     $_AND_                          1
     $_AOI3_                         1
     $_DLATCH_P_                    12
     $_MUX_                         11
     $_NAND_                         1
     $_NOT_                          6
     $_OAI3_                         1
     $_OAI4_                         5
     $_ORNOT_                        3
     $_OR_                           8

=== MEM1_buffer ===

   Number of wires:                  9
   Number of wire bits:             25
   Number of public wires:           9
   Number of public wire bits:      25
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $_DFF_P_                        6

=== MEM2_buffer ===

   Number of wires:                  9
   Number of wire bits:             25
   Number of public wires:           9
   Number of public wire bits:      25
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $_DFF_P_                        6

=== Mem_adder ===

   Number of wires:                161
   Number of wire bits:            487
   Number of public wires:          10
   Number of public wire bits:     336
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                215
     $_ANDNOT_                      29
     $_AND_                          8
     $_AOI3_                         7
     $_AOI4_                         1
     $_NAND_                        34
     $_NOR_                          6
     $_NOT_                          5
     $_OAI3_                         9
     $_ORNOT_                        5
     $_OR_                          36
     $_XNOR_                        34
     $_XOR_                         41

=== Multiplexer32 ===

   Number of wires:                 38
   Number of wire bits:           2373
   Number of public wires:          38
   Number of public wire bits:    2373
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     Multiplexer4                    1
     Multiplexer8                    4

=== Multiplexer4 ===

   Number of wires:                134
   Number of wire bits:            450
   Number of public wires:           6
   Number of public wire bits:     322
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                192
     $_MUX_                        192

=== Multiplexer8 ===

   Number of wires:                 12
   Number of wire bits:            707
   Number of public wires:          12
   Number of public wire bits:     707
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 66
     $_MUX_                         64
     Multiplexer4                    2

=== PC ===

   Number of wires:                785
   Number of wire bits:           1037
   Number of public wires:           9
   Number of public wire bits:     261
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                904
     $_ANDNOT_                      68
     $_AND_                         24
     $_AOI3_                        45
     $_DFF_PN0_                     64
     $_MUX_                        128
     $_NAND_                        43
     $_NOR_                         82
     $_NOT_                         39
     $_OAI3_                        52
     $_ORNOT_                       23
     $_OR_                          83
     $_XNOR_                        74
     $_XOR_                        179

=== Register ===

   Number of wires:               4641
   Number of wire bits:           6956
   Number of public wires:          44
   Number of public wire bits:    2359
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               6647
     $_ANDNOT_                     101
     $_AND_                          1
     $_AOI3_                        64
     $_DFF_N_                     2048
     $_MUX_                       4160
     $_NAND_                         6
     $_NOR_                          3
     $_NOT_                         67
     $_OAI3_                        64
     $_ORNOT_                        9
     $_OR_                         117
     $_XNOR_                         1
     $_XOR_                          4
     Multiplexer32                   2

=== cpu ===

   Number of wires:                 61
   Number of wire bits:           1336
   Number of public wires:          61
   Number of public wire bits:    1336
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 18
     ALU                             1
     BranchUnit                      1
     Control                         1
     EXE_buffer                      1
     Forward_Unit                    1
     Hazard_Unit                     1
     ID_buffer                       1
     IF_buffer                       1
     Imm_Gen                         1
     MEM1_buffer                     1
     MEM2_buffer                     1
     Mem_adder                       1
     Multiplexer4                    4
     PC                              1
     Register                        1

=== design hierarchy ===

   cpu                               1
     ALU                             1
     BranchUnit                      1
     Control                         1
     EXE_buffer                      1
     Forward_Unit                    1
     Hazard_Unit                     1
     ID_buffer                       1
     IF_buffer                       1
     Imm_Gen                         1
     MEM1_buffer                     1
     MEM2_buffer                     1
     Mem_adder                       1
     Multiplexer4                    4
     PC                              1
     Register                        1
       Multiplexer32                 2
         Multiplexer4                1
         Multiplexer8                4
           Multiplexer4              2

   Number of wires:              12442
   Number of wire bits:          36461
   Number of public wires:         578
   Number of public wire bits:   24211
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              17371
     $_ANDNOT_                     738
     $_AND_                         82
     $_AOI3_                       273
     $_AOI4_                         3
     $_DFF_N_                     2340
     $_DFF_PN0_                     64
     $_DFF_P_                      380
     $_DLATCH_P_                    76
     $_MUX_                      10038
     $_NAND_                       172
     $_NOR_                        266
     $_NOT_                        449
     $_OAI3_                       267
     $_OAI4_                       200
     $_ORNOT_                      189
     $_OR_                        1017
     $_XNOR_                       240
     $_XOR_                        577

20.27. Executing CHECK pass (checking for obvious problems).
checking module ALU..
checking module BranchUnit..
checking module Control..
checking module EXE_buffer..
checking module Forward_Unit..
checking module Hazard_Unit..
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [31]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24795 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24893 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24989 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [30]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24794 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24892 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24988 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [29]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24793 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24891 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24987 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [28]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24792 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24890 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24986 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [27]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24791 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24889 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24985 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [26]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24790 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24888 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24984 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [25]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24789 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24887 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24983 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [24]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24788 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24886 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24982 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [23]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24787 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24885 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24981 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [22]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24786 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24884 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24980 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [21]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24785 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24883 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24979 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [20]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24784 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24882 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24978 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [19]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24783 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24881 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24977 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [18]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24782 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24880 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24976 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [17]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24781 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24879 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24975 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [16]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24780 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24878 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24974 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [15]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24779 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24877 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24973 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [14]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24778 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24876 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24972 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [13]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24777 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24875 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24971 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [12]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24776 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24874 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24970 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [11]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24775 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24873 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24969 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [10]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24774 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24872 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24968 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [9]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24773 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24871 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24967 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [8]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24772 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24870 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24966 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [7]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24771 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24869 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24965 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [6]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24770 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24868 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24964 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [5]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24769 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24867 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24963 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [4]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24768 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24866 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24962 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [3]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24767 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24865 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24961 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [2]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24766 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24864 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24960 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [1]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24765 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24863 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24959 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt2 [0]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24764 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24862 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24958 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [31]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24763 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24861 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24957 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [30]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24762 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24860 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24956 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [29]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24761 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24859 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24955 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [28]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24760 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24858 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24954 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [27]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24759 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24857 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24953 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [26]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24758 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24856 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24952 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [25]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24757 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24855 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24951 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [24]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24756 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24854 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24950 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [23]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24755 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24853 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24949 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [22]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24754 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24852 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24948 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [21]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24753 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24851 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24947 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [20]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24752 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24850 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24946 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [19]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24751 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24849 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24945 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [18]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24750 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24848 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24944 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [17]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24749 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24847 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24943 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [16]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24748 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24846 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24942 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [15]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24747 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24845 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24941 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [14]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24746 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24844 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24940 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [13]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24745 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24843 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24939 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [12]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24744 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24842 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24938 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [11]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24743 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24841 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24937 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [10]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24742 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24840 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24936 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [9]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24741 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24839 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24935 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [8]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24740 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24838 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24934 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [7]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24739 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24837 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24933 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [6]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24738 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24836 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24932 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [5]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24737 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24835 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24931 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [4]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24736 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24834 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24930 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [3]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24735 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24833 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24929 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [2]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24734 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24832 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24928 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [1]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24733 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24831 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24927 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\dh_cnt1 [0]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24732 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24830 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24926 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\ind_r [1]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24731 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24797 ($_DFF_N_)
Warning: multiple conflicting drivers for Hazard_Unit.\ind_r [0]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24730 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24796 ($_DFF_N_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [31]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24729 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24829 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24925 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [30]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24728 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24828 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24924 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [29]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24727 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24827 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24923 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [28]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24726 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24826 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24922 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [27]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24725 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24825 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24921 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [26]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24724 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24824 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24920 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [25]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24723 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24823 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24919 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [24]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24722 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24822 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24918 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [23]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24721 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24821 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24917 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [22]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24720 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24820 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24916 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [21]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24719 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24819 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24915 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [20]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24718 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24818 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24914 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [19]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24717 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24817 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24913 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [18]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24716 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24816 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24912 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [17]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24715 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24815 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24911 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [16]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24714 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24814 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24910 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [15]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24713 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24813 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24909 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [14]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24712 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24812 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24908 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [13]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24711 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24811 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24907 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [12]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24710 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24810 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24906 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [11]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24709 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24809 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24905 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [10]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24708 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24808 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24904 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [9]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24707 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24807 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24903 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [8]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24706 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24806 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24902 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [7]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24705 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24805 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24901 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [6]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24704 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24804 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24900 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [5]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24703 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24803 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24899 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [4]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24702 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24802 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24898 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [3]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24701 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24801 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24897 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [2]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24700 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24800 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24896 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [1]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24699 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24799 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24895 ($_DFF_P_)
Warning: multiple conflicting drivers for Hazard_Unit.\bh_cnt [0]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24698 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24798 ($_DFF_N_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$24894 ($_DFF_P_)
checking module ID_buffer..
checking module IF_buffer..
checking module Imm_Gen..
checking module MEM1_buffer..
checking module MEM2_buffer..
checking module Mem_adder..
checking module Multiplexer32..
checking module Multiplexer4..
checking module Multiplexer8..
checking module PC..
checking module Register..
checking module cpu..
found and reported 98 problems.

21. Executing FLATTEN pass (flatten design).
Using template IF_buffer for cells of type IF_buffer.
Using template Imm_Gen for cells of type Imm_Gen.
Using template Control for cells of type Control.
Using template ID_buffer for cells of type ID_buffer.
Using template MEM1_buffer for cells of type MEM1_buffer.
Using template MEM2_buffer for cells of type MEM2_buffer.
Using template Forward_Unit for cells of type Forward_Unit.
Using template Multiplexer4 for cells of type Multiplexer4.
Using template ALU for cells of type ALU.
Using template EXE_buffer for cells of type EXE_buffer.
Using template Register for cells of type Register.
Using template Hazard_Unit for cells of type Hazard_Unit.
Using template BranchUnit for cells of type BranchUnit.
Using template PC for cells of type PC.
Using template Mem_adder for cells of type Mem_adder.
Using template Multiplexer32 for cells of type Multiplexer32.
Using template Multiplexer8 for cells of type Multiplexer8.
<suppressed ~46 debug messages>
No more expansions possible.
Deleting now unused module ALU.
Deleting now unused module BranchUnit.
Deleting now unused module Control.
Deleting now unused module EXE_buffer.
Deleting now unused module Forward_Unit.
Deleting now unused module Hazard_Unit.
Deleting now unused module ID_buffer.
Deleting now unused module IF_buffer.
Deleting now unused module Imm_Gen.
Deleting now unused module MEM1_buffer.
Deleting now unused module MEM2_buffer.
Deleting now unused module Mem_adder.
Deleting now unused module Multiplexer32.
Deleting now unused module Multiplexer4.
Deleting now unused module Multiplexer8.
Deleting now unused module PC.
Deleting now unused module Register.

22. Executing Verilog backend.
Dumping module `\cpu'.

23. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFF_X1 (noninv, pins=4, area=4.52) is a direct match for cell type $_DFF_P_.
  cell DFFR_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN0_.
  cell DFFS_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN1_.
  cell DFFRS_X1 (noninv, pins=6, area=6.38) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFF_PN0_.
  create mapping for $_DFF_PP1_ from mapping for $_DFF_PN1_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFF_N_ from mapping for $_DFF_P_.
  create mapping for $_DFF_NN0_ from mapping for $_DFF_PN0_.
  create mapping for $_DFF_NP0_ from mapping for $_DFF_NN0_.
  create mapping for $_DFF_NN1_ from mapping for $_DFF_NN0_.
  create mapping for $_DFF_NP1_ from mapping for $_DFF_NN1_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  final dff cell mappings:
    DFF_X1 _DFF_N_ (.CK(~C), .D( D), .Q( Q), .QN(~Q));
    DFF_X1 _DFF_P_ (.CK( C), .D( D), .Q( Q), .QN(~Q));
    DFFR_X1 _DFF_NN0_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN( R));
    DFFR_X1 _DFF_NN1_ (.CK(~C), .D(~D), .Q(~Q), .QN( Q), .RN( R));
    DFFR_X1 _DFF_NP0_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN(~R));
    DFFR_X1 _DFF_NP1_ (.CK(~C), .D(~D), .Q(~Q), .QN( Q), .RN(~R));
    DFFR_X1 _DFF_PN0_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R));
    DFFS_X1 _DFF_PN1_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .SN( R));
    DFFR_X1 _DFF_PP0_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN(~R));
    DFFS_X1 _DFF_PP1_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .SN(~R));
    DFFRS_X1 _DFFSR_NNN_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN( S));
    DFFRS_X1 _DFFSR_NNP_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN( S));
    DFFRS_X1 _DFFSR_NPN_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN(~S));
    DFFRS_X1 _DFFSR_NPP_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN(~S));
    DFFRS_X1 _DFFSR_PNN_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN( S));
    DFFRS_X1 _DFFSR_PNP_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN( S));
    DFFRS_X1 _DFFSR_PPN_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN(~S));
    DFFRS_X1 _DFFSR_PPP_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN(~S));
Mapping DFF cells in module `\cpu':
  mapped 2340 $_DFF_N_ cells to \DFF_X1 cells.
  mapped 64 $_DFF_PN0_ cells to \DFFR_X1 cells.
  mapped 380 $_DFF_P_ cells to \DFF_X1 cells.

24. Executing ABC pass (technology mapping using ABC).

24.1. Extracting gate netlist of module `\cpu' to `<abc-temp-dir>/input.blif'..
Extracted 16851 gates and 19715 wires to a netlist network with 2863 inputs and 5150 outputs.

24.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /hw/stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.04 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "WELLTAP_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/hw/stdcells.lib" has 90 cells (27 skipped: 13 seq; 6 tri-state; 8 no func; 10 dont_use).  Time =     0.07 sec
ABC: Memory =    8.88 MB. Time =     0.07 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + read_constr -v /hw/cpu.constr 
ABC: Setting driving cell to be "BUF_X2".
ABC: Setting output load to be 0.010000.
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -D 1000 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 1000 
ABC: + &put 
ABC: + buffer 
ABC: + upsize -D 1000 
ABC: + dnsize -D 1000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =  19944 ( 27.7 %)   Cap =  3.0 ff (  1.0 %)   Area =    22718.53 ( 92.1 %)   Delay =  3122.87 ps  (  0.5 %)               
ABC: Path  0 --     326 : 0    7 pi        A =   0.00  Df =  15.7   -5.8 ps  S =  17.0 ps  Cin =  0.0 ff  Cout =  12.2 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    8041 : 2    1 XNOR2_X1  A =   1.60  Df =  59.7   -8.6 ps  S =  25.6 ps  Cin =  2.3 ff  Cout =   3.2 ff  Cmax =  26.0 ff  G =  131  
ABC: Path  2 --    8043 : 4    2 OAI211_X2 A =   2.39  Df =  86.0   -2.6 ps  S =  23.8 ps  Cin =  3.1 ff  Cout =   4.5 ff  Cmax =  50.8 ff  G =  144  
ABC: Path  3 --    8051 : 4    3 OR4_X1    A =   1.60  Df = 229.8  -75.5 ps  S =  36.1 ps  Cin =  0.9 ff  Cout =  14.4 ff  Cmax =  60.6 ff  G = 1537  
ABC: Path  4 --    8111 : 3    8 NAND3_X1  A =   1.06  Df = 285.2  -74.1 ps  S =  36.7 ps  Cin =  1.6 ff  Cout =  12.6 ff  Cmax =  58.4 ff  G =  753  
ABC: Path  5 --    8458 : 3    3 OAI21_X1  A =   1.06  Df = 348.2  -39.5 ps  S =  28.0 ps  Cin =  1.6 ff  Cout =   3.4 ff  Cmax =  26.1 ff  G =  201  
ABC: Path  6 --    8460 : 2    1 OR2_X2    A =   1.33  Df = 375.7  -22.7 ps  S =   8.6 ps  Cin =  1.6 ff  Cout =   3.4 ff  Cmax = 121.2 ff  G =  198  
ABC: Path  7 --    8461 : 1    8 BUF_X4    A =   1.86  Df = 399.7  -19.9 ps  S =  10.2 ps  Cin =  3.2 ff  Cout =  12.5 ff  Cmax = 242.3 ff  G =  371  
ABC: Path  8 --    9075 : 2    5 AND2_X2   A =   1.33  Df = 438.6  -28.0 ps  S =  16.6 ps  Cin =  1.6 ff  Cout =  10.2 ff  Cmax = 120.8 ff  G =  580  
ABC: Path  9 --    9137 : 4    1 AOI211_X2 A =   2.39  Df = 497.6  -31.0 ps  S =  30.6 ps  Cin =  3.1 ff  Cout =   1.6 ff  Cmax =  29.0 ff  G =   51  
ABC: Path 10 --    9138 : 4    3 NOR4_X1   A =   1.33  Df = 621.2 -131.2 ps  S =  80.6 ps  Cin =  1.6 ff  Cout =   5.7 ff  Cmax =  10.5 ff  G =  343  
ABC: Path 11 --    9191 : 3    3 OAI21_X2  A =   1.86  Df = 643.3 -120.1 ps  S =  21.8 ps  Cin =  3.1 ff  Cout =   4.3 ff  Cmax =  52.1 ff  G =  129  
ABC: Path 12 --    9233 : 3    3 AOI21_X1  A =   1.06  Df = 698.8 -149.2 ps  S =  43.6 ps  Cin =  1.6 ff  Cout =   6.4 ff  Cmax =  25.3 ff  G =  387  
ABC: Path 13 --    9277 : 3    3 OAI21_X2  A =   1.86  Df = 719.7 -138.7 ps  S =  20.3 ps  Cin =  3.1 ff  Cout =   4.2 ff  Cmax =  52.1 ff  G =  130  
ABC: Path 14 --    9320 : 3    3 AOI21_X1  A =   1.06  Df = 764.4 -159.5 ps  S =  36.4 ps  Cin =  1.6 ff  Cout =   4.9 ff  Cmax =  25.3 ff  G =  303  
ABC: Path 15 --    9390 : 6    4 OAI33_X1  A =   1.86  Df = 807.7  -86.8 ps  S =  93.4 ps  Cin =  1.5 ff  Cout =   6.4 ff  Cmax =  11.5 ff  G =  400  
ABC: Path 16 --    9460 : 4    2 OAI211_X1 A =   1.33  Df = 847.9  -92.1 ps  S =  29.0 ps  Cin =  1.6 ff  Cout =   2.6 ff  Cmax =  25.6 ff  G =  159  
ABC: Path 17 --    9461 : 3    3 AND3_X1   A =   1.33  Df = 902.2  -96.6 ps  S =  15.7 ps  Cin =  0.9 ff  Cout =   4.2 ff  Cmax =  60.4 ff  G =  449  
ABC: Path 18 --    9533 : 6    3 OAI33_X1  A =   1.86  Df = 934.1  -31.4 ps  S =  76.5 ps  Cin =  1.5 ff  Cout =   4.2 ff  Cmax =  11.5 ff  G =  262  
ABC: Path 19 --    9613 : 4    2 OAI211_X1 A =   1.33  Df = 972.6  -35.5 ps  S =  26.0 ps  Cin =  1.6 ff  Cout =   2.6 ff  Cmax =  25.6 ff  G =  161  
ABC: Path 20 --    9643 : 3    2 AND3_X1   A =   1.33  Df =1024.0  -40.4 ps  S =  13.7 ps  Cin =  0.9 ff  Cout =   3.3 ff  Cmax =  60.4 ff  G =  349  
ABC: Path 21 --    9672 : 6    3 OAI33_X1  A =   1.86  Df =1092.5  -34.0 ps  S =  88.3 ps  Cin =  1.5 ff  Cout =   5.7 ff  Cmax =  11.5 ff  G =  359  
ABC: Path 22 --    9704 : 4    2 OAI211_X1 A =   1.33  Df =1127.2  -29.0 ps  S =  28.0 ps  Cin =  1.6 ff  Cout =   2.6 ff  Cmax =  25.6 ff  G =  159  
ABC: Path 23 --    9706 : 3    3 AND3_X1   A =   1.33  Df =1176.5  -24.1 ps  S =  15.6 ps  Cin =  0.9 ff  Cout =   4.2 ff  Cmax =  60.4 ff  G =  449  
ABC: Path 24 --    9779 : 6    3 OAI33_X1  A =   1.86  Df =1285.8  -98.1 ps  S =  88.3 ps  Cin =  1.5 ff  Cout =   5.7 ff  Cmax =  11.5 ff  G =  359  
ABC: Path 25 --    9807 : 4    2 OAI211_X1 A =   1.33  Df =1320.4  -93.2 ps  S =  28.0 ps  Cin =  1.6 ff  Cout =   2.6 ff  Cmax =  25.6 ff  G =  159  
ABC: Path 26 --    9808 : 3    3 AND3_X1   A =   1.33  Df =1368.4  -89.0 ps  S =  14.3 ps  Cin =  0.9 ff  Cout =   3.5 ff  Cmax =  60.4 ff  G =  372  
ABC: Path 27 --    9885 : 6    3 OAI33_X1  A =   1.86  Df =1477.4 -163.2 ps  S =  88.3 ps  Cin =  1.5 ff  Cout =   5.7 ff  Cmax =  11.5 ff  G =  359  
ABC: Path 28 --    9915 : 4    2 OAI211_X1 A =   1.33  Df =1515.8 -157.3 ps  S =  29.7 ps  Cin =  1.6 ff  Cout =   3.3 ff  Cmax =  25.6 ff  G =  204  
ABC: Path 29 --    9917 : 3    4 AND3_X2   A =   1.60  Df =1563.8 -153.5 ps  S =  14.7 ps  Cin =  1.6 ff  Cout =   7.4 ff  Cmax = 120.5 ff  G =  451  
ABC: Path 30 --   10026 : 4    2 OAI211_X2 A =   2.39  Df =1596.3 -163.4 ps  S =  19.3 ps  Cin =  3.1 ff  Cout =   2.6 ff  Cmax =  50.8 ff  G =   79  
ABC: Path 31 --   10096 : 3    1 AOI21_X1  A =   1.06  Df =1612.4 -152.2 ps  S =  21.1 ps  Cin =  1.6 ff  Cout =   1.6 ff  Cmax =  25.3 ff  G =   98  
ABC: Path 32 --   10098 : 6    3 OAI33_X1  A =   1.86  Df =1722.1 -224.8 ps  S =  88.3 ps  Cin =  1.5 ff  Cout =   5.7 ff  Cmax =  11.5 ff  G =  359  
ABC: Path 33 --   10124 : 4    2 OAI211_X1 A =   1.33  Df =1756.7 -216.1 ps  S =  28.0 ps  Cin =  1.6 ff  Cout =   2.6 ff  Cmax =  25.6 ff  G =  159  
ABC: Path 34 --   10125 : 3    3 AND3_X1   A =   1.33  Df =1804.7 -211.7 ps  S =  14.3 ps  Cin =  0.9 ff  Cout =   3.5 ff  Cmax =  60.4 ff  G =  372  
ABC: Path 35 --   10186 : 6    3 OAI33_X1  A =   1.86  Df =1913.7 -285.9 ps  S =  88.3 ps  Cin =  1.5 ff  Cout =   5.7 ff  Cmax =  11.5 ff  G =  359  
ABC: Path 36 --   10257 : 4    2 OAI211_X1 A =   1.33  Df =1948.4 -280.2 ps  S =  28.0 ps  Cin =  1.6 ff  Cout =   2.6 ff  Cmax =  25.6 ff  G =  159  
ABC: Path 37 --   10259 : 3    3 AND3_X1   A =   1.33  Df =1996.4 -276.0 ps  S =  14.1 ps  Cin =  0.9 ff  Cout =   3.5 ff  Cmax =  60.4 ff  G =  375  
ABC: Path 38 --   10307 : 6    3 OAI33_X1  A =   1.86  Df =2105.5 -350.3 ps  S =  88.3 ps  Cin =  1.5 ff  Cout =   5.7 ff  Cmax =  11.5 ff  G =  359  
ABC: Path 39 --   10336 : 4    2 OAI211_X1 A =   1.33  Df =2140.1 -344.6 ps  S =  28.0 ps  Cin =  1.6 ff  Cout =   2.6 ff  Cmax =  25.6 ff  G =  159  
ABC: Path 40 --   10338 : 3    3 AND3_X1   A =   1.33  Df =2188.2 -340.5 ps  S =  14.6 ps  Cin =  0.9 ff  Cout =   3.5 ff  Cmax =  60.4 ff  G =  374  
ABC: Path 41 --   10413 : 6    3 OAI33_X1  A =   1.86  Df =2297.2 -414.6 ps  S =  88.3 ps  Cin =  1.5 ff  Cout =   5.7 ff  Cmax =  11.5 ff  G =  359  
ABC: Path 42 --   10445 : 4    2 OAI211_X1 A =   1.33  Df =2331.8 -409.3 ps  S =  28.0 ps  Cin =  1.6 ff  Cout =   2.6 ff  Cmax =  25.6 ff  G =  159  
ABC: Path 43 --   10447 : 3    3 AND3_X1   A =   1.33  Df =2381.2 -404.5 ps  S =  15.7 ps  Cin =  0.9 ff  Cout =   4.2 ff  Cmax =  60.4 ff  G =  450  
ABC: Path 44 --   10520 : 6    3 OAI33_X1  A =   1.86  Df =2490.5 -478.4 ps  S =  88.3 ps  Cin =  1.5 ff  Cout =   5.7 ff  Cmax =  11.5 ff  G =  359  
ABC: Path 45 --   10571 : 4    2 OAI211_X1 A =   1.33  Df =2525.1 -473.5 ps  S =  28.0 ps  Cin =  1.6 ff  Cout =   2.6 ff  Cmax =  25.6 ff  G =  159  
ABC: Path 46 --   10573 : 3    3 AND3_X1   A =   1.33  Df =2574.5 -468.6 ps  S =  15.6 ps  Cin =  0.9 ff  Cout =   4.2 ff  Cmax =  60.4 ff  G =  451  
ABC: Path 47 --   10618 : 6    3 OAI33_X1  A =   1.86  Df =2683.7 -542.6 ps  S =  88.3 ps  Cin =  1.5 ff  Cout =   5.7 ff  Cmax =  11.5 ff  G =  359  
ABC: Path 48 --   10656 : 4    2 OAI211_X1 A =   1.33  Df =2715.3 -534.5 ps  S =  26.7 ps  Cin =  1.6 ff  Cout =   1.9 ff  Cmax =  25.6 ff  G =  119  
ABC: Path 49 --   10701 : 3    2 AND3_X1   A =   1.33  Df =2762.2 -530.2 ps  S =  14.0 ps  Cin =  0.9 ff  Cout =   3.3 ff  Cmax =  60.4 ff  G =  349  
ABC: Path 50 --   10709 : 6    3 OAI33_X1  A =   1.86  Df =2871.1 -604.5 ps  S =  88.3 ps  Cin =  1.5 ff  Cout =   5.7 ff  Cmax =  11.5 ff  G =  359  
ABC: Path 51 --   10762 : 4    2 OAI211_X1 A =   1.33  Df =2905.8 -598.7 ps  S =  28.0 ps  Cin =  1.6 ff  Cout =   2.6 ff  Cmax =  25.6 ff  G =  159  
ABC: Path 52 --   10763 : 3    3 AND3_X1   A =   1.33  Df =2956.0 -592.5 ps  S =  17.2 ps  Cin =  0.9 ff  Cout =   5.0 ff  Cmax =  60.4 ff  G =  523  
ABC: Path 53 --   10826 : 3    2 OAI21_X2  A =   1.86  Df =2982.8 -603.3 ps  S =  18.2 ps  Cin =  3.1 ff  Cout =   3.3 ff  Cmax =  52.1 ff  G =  101  
ABC: Path 54 --   10831 : 3    2 AOI21_X1  A =   1.06  Df =3000.9 -590.5 ps  S =  26.6 ps  Cin =  1.6 ff  Cout =   2.6 ff  Cmax =  25.3 ff  G =  157  
ABC: Path 55 --   10834 : 3    1 OR3_X1    A =   1.33  Df =3079.5 -637.4 ps  S =  12.9 ps  Cin =  0.9 ff  Cout =   1.7 ff  Cmax =  60.6 ff  G =  176  
ABC: Path 56 --   10835 : 3    1 NAND3_X1  A =   1.06  Df =3101.2  -48.2 ps  S =  17.6 ps  Cin =  1.6 ff  Cout =   1.6 ff  Cmax =  58.4 ff  G =   99  
ABC: Path 57 --   10855 : 4    1 OAI211_X1 A =   1.33  Df =3122.9  -48.4 ps  S =  15.4 ps  Cin =  1.6 ff  Cout =   0.0 ff  Cmax =  25.6 ff  G =    0  
ABC: Start-point = pi325 (\MEM2.MEM2_rd_r [3]).  End-point = po64 ($techmap\ALU1.$0\out_r[63:0] [63]).
ABC: + write_blif <abc-temp-dir>/output.blif 

24.1.2. Re-integrating ABC results.
ABC RESULTS:           AND2_X1 cells:      303
ABC RESULTS:           AND2_X2 cells:        1
ABC RESULTS:           AND3_X1 cells:       43
ABC RESULTS:           AND3_X2 cells:        2
ABC RESULTS:           AND4_X1 cells:        6
ABC RESULTS:           AND4_X2 cells:        1
ABC RESULTS:         AOI211_X1 cells:      195
ABC RESULTS:         AOI211_X2 cells:        1
ABC RESULTS:          AOI21_X1 cells:     1502
ABC RESULTS:          AOI21_X4 cells:        1
ABC RESULTS:         AOI221_X1 cells:       53
ABC RESULTS:         AOI222_X1 cells:       25
ABC RESULTS:          AOI22_X1 cells:       98
ABC RESULTS:            BUF_X1 cells:     1504
ABC RESULTS:            BUF_X4 cells:        2
ABC RESULTS:         CLKBUF_X1 cells:      730
ABC RESULTS:            INV_X1 cells:     3289
ABC RESULTS:           MUX2_X1 cells:     4600
ABC RESULTS:          NAND2_X1 cells:      805
ABC RESULTS:          NAND3_X1 cells:      477
ABC RESULTS:          NAND4_X1 cells:       36
ABC RESULTS:           NOR2_X1 cells:     1474
ABC RESULTS:           NOR2_X4 cells:        1
ABC RESULTS:           NOR3_X1 cells:      172
ABC RESULTS:           NOR3_X4 cells:        1
ABC RESULTS:           NOR4_X1 cells:       49
ABC RESULTS:           NOR4_X2 cells:        1
ABC RESULTS:         OAI211_X1 cells:      569
ABC RESULTS:         OAI211_X2 cells:        2
ABC RESULTS:          OAI21_X1 cells:     2790
ABC RESULTS:          OAI21_X2 cells:        3
ABC RESULTS:          OAI21_X4 cells:        1
ABC RESULTS:         OAI221_X1 cells:      197
ABC RESULTS:         OAI221_X2 cells:        1
ABC RESULTS:         OAI222_X1 cells:        7
ABC RESULTS:          OAI22_X1 cells:      267
ABC RESULTS:          OAI33_X1 cells:       14
ABC RESULTS:            OR2_X1 cells:      242
ABC RESULTS:            OR2_X2 cells:        1
ABC RESULTS:            OR3_X1 cells:       57
ABC RESULTS:            OR4_X1 cells:       10
ABC RESULTS:            OR4_X2 cells:        1
ABC RESULTS:          XNOR2_X1 cells:      271
ABC RESULTS:           XOR2_X1 cells:      139
ABC RESULTS:        internal signals:    11702
ABC RESULTS:           input signals:     2863
ABC RESULTS:          output signals:     5150
Removing temp directory.

Warnings: 196 unique messages, 196 total
End of script. Logfile hash: 3f877c00ee
CPU: user 6.43s system 0.14s, MEM: 108.64 MB total, 93.71 MB resident
Yosys 0.9 (git sha1 UNKNOWN, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 16% 19x opt_clean (1 sec), 16% 16x opt_merge (1 sec), ...
